{"version":3,"sources":["App/components/base/RolUpSert.js","App/components/base/RolListar.js","App/pages/RolPage.js","App/components/base/NoAutorizado.js"],"names":["RolUpSert","dataInicial","abrirModal","setAbrirModal","GetCatRol","useState","loading","setLoading","useForm","values","handleOnChange","dispatch","useDispatch","NuevoRegistro","a","callApi","method","body","JSON","stringify","alert_exitoso","ActualizarRegistro","response","UpdateUserInfo","handleOnSubmit","e","preventDefault","rolId","Modal","show","onHide","Loading","Header","closeButton","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","alert_warning","Form","Row","Group","Col","md","Label","htmlFor","name","id","required","value","nombre","onChange","errorMessage","placeholder","autoComplete","style","textTransform","type","descripcion","estadoId","className","onClick","RolListar","state","useSelector","accesos","setAccesos","catRol","setCatRol","initData","setdataInicial","find","acceso","menuId","accesoId","useEffect","misAccesos","filter","item","GetAccesosByMenuId","sm","Card","Button","variant","Table","striped","hover","responsive","bordered","map","estado","Estado","key","textAlign","Link","to","btoa","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","listActual","NoAutorizado","RolPage","Heading"],"mappings":"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","file":"static/js/29.4f98d1c8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport { useDispatch } from 'react-redux';\r\nimport { UpdateUserInfo } from '../../../actions/auth';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nexport const RolUpSert = ({ dataInicial, abrirModal, setAbrirModal, GetCatRol }) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const dispatch = useDispatch();\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('rol', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Rol Registrado exitosamente\");\r\n            GetCatRol();\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('rol', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            dispatch(UpdateUserInfo());\r\n            GetCatRol();\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.rolId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la informaci√≥n solicitada por el formulario\");\r\n    };\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'capitalize';\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)}>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.rolId > 0 ? 'Actualizar Rol' : 'Nuevo Rol'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"nombre\">Nombre</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"nombre\"\r\n                                            id=\"nombre\"\r\n                                            required\r\n                                            value={values.nombre}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Nombre\"\r\n                                            autoComplete=\"off\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Descripci√≥n</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"descripcion\"\r\n                                            id=\"descripcion\"\r\n                                            required\r\n                                            value={values.descripcion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Descripci√≥n\"\r\n                                            autoComplete=\"off\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.rolId > 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.rolId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { RolUpSert } from './RolUpSert';\r\nimport { Link } from 'react-router-dom';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport { UpdateUserInfo } from '../../../actions/auth';\r\nimport Loading from './Loading';\r\nconst menuId = 11;\r\nconst menuIdRolMenuAcceso = 20;\r\nexport const RolListar = () => {\r\n    const state = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catRol, setCatRol] = useState([]);\r\n    const initData = {\r\n        rolId: '',\r\n        nombre: '',\r\n        descripcion: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => (item.menuId === menuId || item.menuId === menuIdRolMenuAcceso));\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetCatRol = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('rol?estadoId=1;2');\r\n            if (response) {\r\n                setCatRol(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { rolId, nombre, descripcion, estadoId } = catRol.find(item => item.rolId === id);\r\n        setdataInicial({\r\n            rolId,\r\n            nombre,\r\n            descripcion,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`rol/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    dispatch(UpdateUserInfo());\r\n                    let listActual = catRol.filter(item => item.rolId !== id);\r\n                    setCatRol(listActual);\r\n                }\r\n            } else {\r\n                alert_warning('No se elimin√≥ ning√∫n elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        GetCatRol();\r\n    }, [accesos]);\r\n    return (\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Roles</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Nuevo Rol</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"mytable\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>C√≥digo</th>\r\n                                                            <th>Nombre</th>\r\n                                                            <th>Descripci√≥n</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => acceso.menuId === menuIdRolMenuAcceso && acceso.accesoId === 3) &&\r\n                                                                <th>Accesos</th>\r\n                                                            }\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            catRol.map(({ rolId, nombre, descripcion, Estado: { descripcion: estado } }) => (\r\n                                                                <tr key={rolId}>\r\n                                                                    <td>{rolId}</td>\r\n                                                                    <td>{nombre}</td>\r\n                                                                    <td>{descripcion}</td>\r\n                                                                    <td>{estado}</td>{\r\n                                                                        accesos.find(acceso => acceso.menuId === menuIdRolMenuAcceso && acceso.accesoId === 3) &&\r\n                                                                        <td style={{ textAlign: \"center\" }}>\r\n                                                                            <Link className=\"btn-icon btn btn-info btn-sm\" to={`/base/seguridad/rolmenuacceso/${btoa(`idrol=${rolId}`)}`}><i className=\"feather icon-lock\" /></Link>\r\n                                                                        </td>\r\n                                                                    }\r\n\r\n                                                                    {\r\n                                                                        accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                        <td style={{ textAlign: \"center\" }}>\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(rolId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                            }\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(rolId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                    }\r\n                                                                </tr>\r\n                                                            ))\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <RolUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} GetCatRol={GetCatRol} dataInicial={dataInicial} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { RolListar } from '../components/base/RolListar'\r\n\r\nconst RolPage = () => {\r\n    return (\r\n       <RolListar/>\r\n    )\r\n}\r\n\r\nexport default RolPage\r\n","import React from 'react'\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nexport const NoAutorizado = () => {\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading as=\"h4\">Informaci√≥n!</Alert.Heading>\r\n                        <p>No esta autorizado para poder visualizar los elementos</p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">Comuniquese con el administrador para la asignaci√≥n de permisos</p>\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n"],"sourceRoot":""}