{"version":3,"sources":["App/components/base/MenuUpSert.js","App/components/base/MenuAcceso.js","App/components/base/MenuListar.js","App/pages/MenuPage.js","App/components/base/NoAutorizado.js","helpers/estiloTabla.js"],"names":["MenuUpSert","dataInicial","abrirModal","setAbrirModal","catMenu","GetCatMenu","dispatch","useDispatch","useState","loading","setLoading","useForm","values","handleOnChange","NuevoRegistro","a","callApi","method","body","JSON","stringify","alert_exitoso","ActualizarRegistro","response","UpdateUserInfo","handleOnSubmit","e","preventDefault","menuId","errorMessage","Modal","show","onHide","size","Loading","Header","closeButton","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","alert_warning","Form","Row","Group","Col","md","Label","htmlFor","name","id","required","value","descripcion","onChange","placeholder","autoComplete","style","textTransform","type","posicion","classes","href","icono","menu_padreId","map","key","visible","estadoId","className","onClick","MenuAcceso","idMenu","catAcceso","state","useSelector","accesos","setAccesos","catAccesosAsignados","setCatAccesosAsignado","data","GetAccesosAsignado","handleChangeChecbox","menu_accesoId","accesoId","estadoAux","find","acceso","useEffect","misAccesos","filter","item","GetAccesosByMenuId","Table","striped","hover","responsive","bordered","filaAcceso","asignado","textAlign","Control","checked","NoAutorizado","MenuListar","abrirModalacceso","setAbrirModalAcceso","setCatMenu","setCatAcceso","initData","setdataInicial","limpiarEstiloTabla","asignarEstiloTabla","GetAccesos","sm","Card","Button","variant","MenuPadre","estado","Estado","descPadre","handleAcceso","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","listActual","handleDelete","MenuPage","Heading","$","DataTable","require","selector","filas","searching","bLengthChange","bAutoWidth","lengthMenu","displayLength","language","processing","search","info","infoEmpty","infoFiltered","infoPostFix","loadingRecords","zeroRecords","emptyTable","paginate","first","previous","next","last","aria","sortAscending","sortDescending","destroy"],"mappings":"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","file":"static/js/23.b1c08cd9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport { useDispatch } from 'react-redux';\r\nimport { UpdateUserInfo } from '../../../actions/auth';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nexport const MenuUpSert = ({ dataInicial, abrirModal, setAbrirModal, catMenu, GetCatMenu }) => {\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false)\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('menu', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Menu registrado exitosamente\");\r\n            GetCatMenu();\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('menu', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            dispatch(UpdateUserInfo());\r\n            GetCatMenu();\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.menuId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'capitalize';\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"xl\">\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.menuId > 0 ? 'Actualizar Menu' : 'Nuevo Menu'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Descripción</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"descripcion\"\r\n                                            id=\"descripcion\"\r\n                                            required\r\n                                            value={values.descripcion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Descripción\"\r\n                                            autoComplete=\"off\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"posicion\">Posición</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"posicion\"\r\n                                            id=\"posicion\"\r\n                                            required\r\n                                            value={values.posicion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Posición\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"number\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"classes\">Classes</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"classes\"\r\n                                            id=\"classes\"\r\n                                            required\r\n                                            value={values.classes}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Classes\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"type\">Tipo</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"type\"\r\n                                            id=\"type\"\r\n                                            required\r\n                                            value={values.type}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Tipo\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"href\">Href</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"href\"\r\n                                            id=\"href\"\r\n                                            value={values.href}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Href\"\r\n                                            autoComplete=\"off\"\r\n                                            style={{ textTransform: 'lowercase' }}\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"icono\">Icono</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"icono\"\r\n                                            id=\"icono\"\r\n                                            value={values.icono}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Icono\"\r\n                                            autoComplete=\"off\"\r\n                                            style={{ textTransform: 'lowercase' }}\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"menu_padreId\">Padre</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"menu_padreId\"\r\n                                            id=\"menu_padreId\"\r\n                                            value={values.menu_padreId}\r\n                                            errorMessage={errorMessage}\r\n                                            onChange={handleOnChange}>\r\n                                            <option value=\"0\">Seleccione un menu</option>\r\n                                            {\r\n                                                catMenu.map(({ menuId, descripcion }) => (\r\n                                                    <option value={menuId} key={menuId}>{descripcion}</option>\r\n                                                ))\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"visible\">Visible</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"visible\"\r\n                                            id=\"visible\"\r\n                                            value={values.visible}\r\n                                            required\r\n                                            errorMessage={errorMessage}\r\n                                            onChange={handleOnChange}>\r\n                                            <option value=\"\">Seleccione</option>\r\n                                            <option value=\"1\">Si</option>\r\n                                            <option value=\"0\">No</option>\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    {\r\n                                        dataInicial.menuId > 0 &&\r\n                                        <Form.Group as={Col} md=\"6\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.menuId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal >\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Table, Form, Modal } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UpdateUserInfo } from '../../../actions/auth';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso } from '../../../helpers/Notificacion';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nconst menuId = 19;\r\nexport const MenuAcceso = ({ menuId: idMenu, abrirModal, setAbrirModal, catAcceso }) => {\r\n    const state = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [catAccesosAsignados, setCatAccesosAsignado] = useState([]);\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const NuevoRegistro = async (data) => {\r\n        let response = await callApi('menuacceso', {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Acceso asignado exitosamente\");\r\n            dispatch(UpdateUserInfo());\r\n            GetAccesosAsignado(idMenu);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async (data) => {\r\n        let response = await callApi('menuacceso', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            dispatch(UpdateUserInfo());\r\n            GetAccesosAsignado(idMenu);\r\n        }\r\n    }\r\n\r\n    const handleChangeChecbox = async (menu_accesoId, accesoId, estadoId) => {\r\n        setLoading(true);\r\n        if (menu_accesoId === 0) {\r\n            const data = {\r\n                menuId: idMenu,\r\n                accesoId,\r\n                estadoId: 1\r\n            };\r\n\r\n            await NuevoRegistro(data);\r\n        } else if (menu_accesoId > 0) {\r\n            let estadoAux = 3;\r\n            if (estadoId === 1) {\r\n                estadoAux = 2;\r\n            } else if (estadoId === 2) {\r\n                estadoAux = 1;\r\n            }\r\n            const data = {\r\n                menu_accesoId,\r\n                accesoId,\r\n                estadoId: estadoAux\r\n            };\r\n            await ActualizarRegistro(data);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetAccesosAsignado = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi(`menuacceso?menuId=${id}&estadoId=1;2`);\r\n            if (response) {\r\n                setCatAccesosAsignado(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetAccesosAsignado(idMenu);\r\n    }, [idMenu, accesos]);\r\n\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            <Modal.Header closeButton>\r\n                <Modal.Title as=\"h5\">Acciones</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                {\r\n                    loading === true ?\r\n                        <Loading />\r\n                        : <>\r\n                            {\r\n                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                    <Table striped hover responsive bordered id=\"mytable\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Codigo acceso</th>\r\n                                                <th>Acceso</th>\r\n                                                {\r\n                                                    (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) || accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2)) &&\r\n                                                    <th>Estado</th>\r\n                                                }\r\n                                            </tr>\r\n\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                catAcceso.map(({ accesoId, descripcion }) => {\r\n                                                    const filaAcceso = catAccesosAsignados.find(item => item.accesoId === accesoId);\r\n\r\n                                                    let asignado = false;\r\n                                                    const { menu_accesoId = 0, estadoId = 0 } = !!filaAcceso && filaAcceso;\r\n                                                    if (estadoId === 1) {\r\n                                                        asignado = true;\r\n                                                    }\r\n                                                    return (\r\n                                                        (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) || asignado || menu_accesoId > 0) &&\r\n                                                        <tr key={accesoId}>\r\n                                                            <td>{accesoId}</td>\r\n                                                            <td>{descripcion}</td>\r\n                                                            {\r\n                                                                (estadoId === 1 || estadoId === 2) ?\r\n                                                                    <>{\r\n                                                                        accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) ?\r\n                                                                            <td style={{ textAlign: \"center\" }}>\r\n                                                                                <Form.Group>\r\n                                                                                    <div className=\"switch switch-alternative d-inline m-r-10\">\r\n                                                                                        <Form.Control type=\"checkbox\" id={`accesoid_${accesoId}`} checked={asignado} onChange={() => { handleChangeChecbox(menu_accesoId, accesoId, estadoId); }} />\r\n                                                                                        <Form.Label htmlFor={`accesoid_${accesoId}`} className=\"cr\" />\r\n                                                                                    </div>\r\n                                                                                    <Form.Label htmlFor={`accesoid_${accesoId}`}>{\r\n                                                                                        asignado ? 'Activo' : 'Inactivo'\r\n                                                                                    }</Form.Label>\r\n                                                                                </Form.Group>\r\n                                                                            </td>\r\n                                                                            :\r\n                                                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                                            <td style={{ textAlign: \"center\" }}><label className=\"text-danger\">No Autorizado</label></td>\r\n                                                                    }\r\n                                                                    </>\r\n                                                                    :\r\n                                                                    <>\r\n                                                                        {\r\n                                                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                                            <td style={{ textAlign: \"center\" }}>\r\n                                                                                <Form.Group>\r\n                                                                                    <div className=\"switch switch-alternative d-inline m-r-10\">\r\n                                                                                        <Form.Control type=\"checkbox\" id={`accesoid_${accesoId}`} checked={asignado} onChange={() => { handleChangeChecbox(menu_accesoId, accesoId, estadoId); }} />\r\n                                                                                        <Form.Label htmlFor={`accesoid_${accesoId}`} className=\"cr\" />\r\n                                                                                    </div>\r\n                                                                                    <Form.Label htmlFor={`accesoid_${accesoId}`}>Asignar acceso a menu</Form.Label>\r\n                                                                                </Form.Group>\r\n                                                                            </td>\r\n                                                                        }\r\n                                                                    </>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </tbody>\r\n                                    </Table>\r\n                                    : <NoAutorizado />\r\n                            }\r\n                        </>\r\n                }\r\n            </Modal.Body>\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { MenuUpSert } from './MenuUpSert';\r\nimport { MenuAcceso } from './MenuAcceso';\r\nimport { limpiarEstiloTabla, asignarEstiloTabla } from '../../../helpers/estiloTabla';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport { UpdateUserInfo } from '../../../actions/auth';\r\nimport Loading from './Loading';\r\nconst menuId = 21;\r\nconst menuIdAcceso = 1;\r\nexport const MenuListar = () => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const dispatch = useDispatch();\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [abrirModalacceso, setAbrirModalAcceso] = useState(false);\r\n    const [catMenu, setCatMenu] = useState([]);\r\n    const [catAcceso, setCatAcceso] = useState([]);\r\n    const initData = {\r\n        menuId: '',\r\n        posicion: '',\r\n        descripcion: '',\r\n        href: '',\r\n        visible: '',\r\n        classes: '',\r\n        type: '',\r\n        icono: '',\r\n        menu_padreId: 0,\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdAcceso);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetCatMenu = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            limpiarEstiloTabla(\"#mytable\");\r\n            setLoading(true);\r\n            let response = await callApi('menu?estadoId=1;2');\r\n            if (response) {\r\n                setCatMenu(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n        asignarEstiloTabla(\"#mytable\");\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { menuId, posicion, descripcion, href, icono, menu_padreId, estadoId, visible, classes, type } = catMenu.find(item => item.menuId === id);\r\n        setdataInicial({\r\n            menuId,\r\n            posicion,\r\n            descripcion,\r\n            href,\r\n            icono,\r\n            visible,\r\n            classes,\r\n            type,\r\n            menu_padreId,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleAcceso = (id) => {\r\n        const { menuId, posicion, descripcion, href, icono, menu_padreId, estadoId } = catMenu.find(item => item.menuId === id);\r\n        setdataInicial({\r\n            menuId,\r\n            posicion,\r\n            descripcion,\r\n            href,\r\n            icono,\r\n            menu_padreId,\r\n            estadoId\r\n        });\r\n        setAbrirModalAcceso(true);\r\n    }\r\n\r\n\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`menu/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    dispatch(UpdateUserInfo());\r\n                    let listActual = catMenu.filter(item => item.menuId !== id);\r\n                    setCatMenu(listActual);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n    const GetAccesos = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdAcceso && acceso.accesoId === 3)) {\r\n            let response = await callApi('acceso?estadoId=1');\r\n            if (response) {\r\n                setCatAcceso(response);\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetCatMenu();\r\n        GetAccesos();\r\n    }, [accesos]);\r\n    return (\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Menu</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Menu</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"mytable\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>Código</th>\r\n                                                            <th>Descripción</th>\r\n                                                            <th>Posición</th>\r\n                                                            <th>Href</th>\r\n                                                            <th>Icono</th>\r\n                                                            <th>Menu Padre</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => acceso.menuId === menuIdAcceso && acceso.accesoId === 3) && <th>Acciones</th>\r\n                                                            }\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            catMenu.map(({ menuId: id, descripcion, posicion, href, icono, menu_padreId, MenuPadre, Estado: { descripcion: estado } }) => {\r\n                                                                let { descripcion: descPadre = \"\" } = !!MenuPadre && MenuPadre;\r\n                                                                return (\r\n                                                                    <tr key={id}>\r\n                                                                        <td>{id}</td>\r\n                                                                        <td>{descripcion}</td>\r\n                                                                        <td>{posicion}</td>\r\n                                                                        <td>{href}</td>\r\n                                                                        <td>{icono}</td>\r\n                                                                        <td>{descPadre}</td>\r\n                                                                        <td>{estado}</td>\r\n                                                                        {\r\n                                                                            accesos.find(acceso => acceso.menuId === menuIdAcceso && acceso.accesoId === 3) &&\r\n                                                                            <td style={{ textAlign: \"center\" }}>\r\n                                                                                <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleAcceso(id) }}><i className=\"feather icon-zap\" /></button>\r\n                                                                            </td>\r\n                                                                        }\r\n                                                                        {\r\n                                                                            accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                            <td style={{ textAlign: \"center\" }}>\r\n\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                    <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(id) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                                }\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                    <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(id) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                                }\r\n                                                                            </td>\r\n                                                                        }\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <MenuUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} GetCatMenu={GetCatMenu} catMenu={catMenu} dataInicial={dataInicial} />\r\n                            }\r\n                            {\r\n                                abrirModalacceso === true &&\r\n                                <MenuAcceso abrirModal={abrirModalacceso} setAbrirModal={setAbrirModalAcceso} catAcceso={catAcceso} menuId={dataInicial.menuId} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { MenuListar } from '../components/base/MenuListar';\r\n\r\nconst MenuPage = () => {\r\n    return (\r\n      <MenuListar/>\r\n    )\r\n}\r\n\r\nexport default MenuPage;\r\n","import React from 'react'\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nexport const NoAutorizado = () => {\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading as=\"h4\">Información!</Alert.Heading>\r\n                        <p>No esta autorizado para poder visualizar los elementos</p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">Comuniquese con el administrador para la asignación de permisos</p>\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n","import $ from 'jquery';\r\n$.DataTable = require('datatables.net-bs');\r\nrequire('datatables.net-responsive-bs');\r\n\r\nexport const asignarEstiloTabla = (selector,filas=10) => {\r\n    $(selector).DataTable({\r\n        searching: true,\r\n        bLengthChange: false,\r\n        bAutoWidth: false,\r\n        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"Todos\"]],\r\n        displayLength: filas,\r\n        language: {\r\n            processing: \"Cargando información\",\r\n            search: \"Filtrar por:\",\r\n            lengthMenu: \"Mostrar _MENU_ filas\",\r\n            info: \"Vizualización  _END_ de _TOTAL_ filas\",\r\n            infoEmpty: \"Vizualización del elemento 0 a 0 de 0 filas\",\r\n            infoFiltered: \"(Filtrado de _MAX_ filas en total)\",\r\n            infoPostFix: \"\",\r\n            loadingRecords: \"Cargando...\",\r\n            zeroRecords: \"No se logró encontrar ninguna coincidencia\",\r\n            emptyTable: \"No existen registros\",\r\n            paginate: {\r\n                first: \"Primera\",\r\n                previous: \"Anterior\",\r\n                next: \"Siguiente\",\r\n                last: \"Ultima\"\r\n            },\r\n            aria: {\r\n                sortAscending: \": active para ordenar la columna en orden ascendente\",\r\n                sortDescending: \": active para ordenar la columna en orden descendente\"\r\n            }\r\n        }\r\n    });\r\n}\r\nexport const limpiarEstiloTabla=(selector)=>{\r\n        $(selector).DataTable().destroy();\r\n}"],"sourceRoot":""}