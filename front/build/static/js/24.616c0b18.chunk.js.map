{"version":3,"sources":["App/components/base/MunicipioUpSert.js","App/components/base/MunicipioListar.js","App/pages/MunicipioPage.js","App/components/base/NoAutorizado.js","helpers/estiloTabla.js"],"names":["MunicipioUpSert","dataInicial","abrirModal","setAbrirModal","catPaises","GetMunicipios","useForm","values","handleOnChange","useState","loading","setLoading","departamentos","setDepartamentos","regionId","infoPais","handleChangeAuxPais","GetDepartamentos","id","a","callApi","response","NuevoRegistro","method","body","JSON","stringify","alert_exitoso","departamentoId","ActualizarRegistro","handleOnSubmit","e","preventDefault","municipioId","useEffect","errorMessage","Modal","show","onHide","Loading","Header","closeButton","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","alert_warning","Form","Row","Group","Col","md","Label","htmlFor","name","required","onChange","value","target","map","descripcion","key","municipioId_depto","placeholder","autoComplete","type","style","textTransform","estadoId","className","onClick","MunicipioListar","state","useSelector","accesos","setAccesos","setCatPais","municipios","setMunicipios","initData","setdataInicial","GetPaises","find","acceso","menuId","accesoId","limpiarEstiloTabla","asignarEstiloTabla","misAccesos","filter","item","GetAccesosByMenuId","sm","Card","Button","variant","Table","striped","hover","responsive","bordered","departamento","Departamento","estado","Estado","textAlign","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","muns","NoAutorizado","MunicipioPage","Heading","$","DataTable","require","selector","filas","searching","bLengthChange","bAutoWidth","lengthMenu","displayLength","language","processing","search","info","infoEmpty","infoFiltered","infoPostFix","loadingRecords","zeroRecords","emptyTable","paginate","first","previous","next","last","aria","sortAscending","sortDescending","destroy"],"mappings":"oTAOaA,EAAkB,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,YAAaC,EAA0D,EAA1DA,WAAYC,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cAAoB,EACpEC,YAAQL,GAD4D,mBAC9FM,EAD8F,KACtFC,EADsF,OAEvEC,oBAAS,GAF8D,mBAE9FC,EAF8F,KAErFC,EAFqF,OAG3DF,mBAAS,IAHkD,mBAG9FG,EAH8F,KAG/EC,EAH+E,OAI7DJ,mBAASR,EAAYa,UAJwC,mBAI9FC,EAJ8F,KAIpFC,EAJoF,KAU/FC,EAAgB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACrBR,GAAW,GADU,SAEAS,YAAQ,yBAAD,OAA0BF,EAA1B,0BAFP,OAEjBG,EAFiB,OAGrBR,EAAiBQ,GACjBV,GAAW,GAJU,2CAAH,sDAMhBW,EAAa,uCAAG,sBAAAH,EAAA,sEACGC,YAAQ,YAAa,CACtCG,OAAQ,OACRC,KAAMC,KAAKC,UAAUnB,KAHP,gBAOdoB,YAAc,qCACdtB,EAAcE,EAAOqB,gBACrBzB,GAAc,IATA,2CAAH,qDAYb0B,EAAkB,uCAAG,4BAAAV,EAAA,sEACFC,YAAQ,YAAa,CACtCG,OAAQ,MACRC,KAAMC,KAAKC,UAAUnB,KAHF,QACnBc,EADmB,UAOnBM,YAAcN,GACdhB,EAAcE,EAAOqB,iBAEzBzB,GAAc,GAVS,2CAAH,qDAYlB2B,EAAc,uCAAG,WAAOC,GAAP,SAAAZ,EAAA,yDACnBY,EAAEC,iBACFrB,GAAW,KACPV,EAAYgC,YAAc,GAHX,gCAITJ,IAJS,6CAMTP,IANS,OAQnBX,GAAW,GARQ,4CAAH,sDAcpBuB,qBAAU,WACNjB,EAAiBhB,EAAYa,YAC9B,IAEH,IAAMqB,EAAe,oBAErB,OACI,kBAACC,EAAA,EAAD,CAAOC,KAAMnC,EAAYoC,OAAQ,kBAAMnC,GAAc,MAEjC,IAAZO,EACI,kBAAC6B,EAAA,EAAD,MACE,oCACE,kBAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,GACrB,kBAACL,EAAA,EAAMM,MAAP,CAAaC,GAAG,MAAM1C,EAAYgC,YAAc,EAAI,uBAAyB,oBAEjF,kBAACG,EAAA,EAAMQ,KAAP,KACI,kBAAC,iBAAD,CAAgBC,SAAUf,EAAgBgB,cApBxC,SAACf,EAAGgB,EAAUC,GACpCC,YAAc,4EAoBU,kBAACC,EAAA,EAAKC,IAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAYT,GAAIU,IAAKC,GAAG,MACpB,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAQ,YAApB,aACA,kBAAC,cAAD,CACIC,KAAK,WACLvC,GAAG,WACHwC,UAAQ,EACRC,SAxEb,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACpC3C,EAAiB2C,GACjB5C,EAAoB4C,IAuEgBA,MAAO7C,EACPoB,aAAcA,GACd,4BAAQyB,MAAM,IAAd,4BAEIxD,EAAU0D,KAAI,gBAAGhD,EAAH,EAAGA,SAAUiD,EAAb,EAAaA,YAAb,OACV,4BAAQH,MAAO9C,EAAUkD,IAAKlD,GAAWiD,QAOzD,kBAACb,EAAA,EAAKE,MAAN,CAAYT,GAAIU,IAAKC,GAAG,MACpB,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAQ,kBAApB,gBACA,kBAAC,cAAD,CACIC,KAAK,iBACLvC,GAAG,iBACHwC,UAAQ,EACRE,MAAOrD,EAAOqB,eACd+B,SAAUnD,EACV2B,aAAcA,GACd,4BAAQyB,MAAM,IAAd,8BAEIhD,EAAckD,KAAI,gBAAGlC,EAAH,EAAGA,eAAgBmC,EAAnB,EAAmBA,YAAnB,OACd,4BAAQH,MAAOhC,EAAgBoC,IAAKpC,GAAiBmC,QAMrE,kBAACb,EAAA,EAAKE,MAAN,CAAYT,GAAIU,IAAKC,GAAG,MACpB,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAQ,qBAApB,0BACA,kBAAC,YAAD,CACIC,KAAK,oBACLvC,GAAG,oBACHwC,UAAQ,EACRE,MAAOrD,EAAO0D,kBACdN,SAAUnD,EACV2B,aAAcA,EACd+B,YAAY,+CACZC,aAAa,MACbC,KAAK,YAGb,kBAAClB,EAAA,EAAKE,MAAN,CAAYT,GAAIU,IAAKC,GAAG,MACpB,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAQ,eAApB,UACA,kBAAC,YAAD,CACIC,KAAK,cACLvC,GAAG,cACHwC,UAAQ,EACRE,MAAOrD,EAAOwD,YACdJ,SAAUnD,EACV2B,aAAcA,EACd+B,YAAY,SACZC,aAAa,MACbE,MAAO,CAAEC,cA3E3B,cA4EkBF,KAAK,UAITnE,EAAYgC,YAAc,GAC1B,kBAACiB,EAAA,EAAKE,MAAN,CAAYT,GAAIU,IAAKC,GAAG,MACpB,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAQ,YAApB,UACA,kBAAC,cAAD,CACIC,KAAK,WACLvC,GAAG,WACH0C,MAAOrD,EAAOgE,SACdb,UAAQ,EACRvB,aAAcA,EACdwB,SAAUnD,GACV,4BAAQoD,MAAM,IAAd,wBACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,cAIZ,yBAAKY,UAAU,aACf,yBAAKA,UAAU,YACX,4BAAQJ,KAAK,SAASK,QAAS,WAAQtE,GAAc,IAAUqE,UAAU,mBAAzE,cAEJ,yBAAKA,UAAU,YACX,4BAAQJ,KAAK,SAASI,UAAU,mBAAhC,IAAoDvE,EAAYgC,YAAc,EAAI,aAAe,oB,gBCvJ5HyC,EAAkB,WAC3B,IAAMC,EAAQC,aAAY,SAAAD,GAAK,OAAIA,KADF,EAEHlE,mBAAS,IAFN,mBAE1BoE,EAF0B,KAEjBC,EAFiB,OAGHrE,oBAAS,GAHN,mBAG1BC,EAH0B,KAGjBC,EAHiB,OAIGF,oBAAS,GAJZ,mBAI1BP,EAJ0B,KAIdC,EAJc,OAKDM,mBAAS,IALR,mBAK1BL,EAL0B,KAKf2E,EALe,OAMStE,mBAAS,IANlB,mBAM1BG,EAN0B,KAMXC,EANW,OAOGJ,mBAAS,IAPZ,mBAO1BuE,EAP0B,KAOdC,EAPc,KAQ3BC,EAAW,CACbtD,eAAgB,GAChBd,SAAU,GACViD,YAAa,GACbE,kBAAmB,GACnBM,SAAU,GAbmB,EA0BK9D,mBAASyE,GA1Bd,mBA0B1BjF,EA1B0B,KA0BbkF,EA1Ba,KA+B3BC,EAAS,uCAAG,4BAAAjE,EAAA,0DACV0D,EAAQQ,MAAK,SAAAC,GAAM,OAjCV,IAiCcA,EAAOC,QAA+C,IAApBD,EAAOE,YADtD,uBAEV7E,GAAW,GAFD,SAGWS,YAAQ,+BAHnB,QAGNC,EAHM,SAKN0D,EAAW1D,GALL,sBAQV0D,EAAW,CAAC,CAAEjE,SAAU,GAAIiD,YAAa,wBAR/B,OAUdpD,GAAW,GAVG,4CAAH,qDAYTM,EAAgB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,2DACjBD,EAAK,GADY,qBAEb2D,EAAQQ,MAAK,SAAAC,GAAM,OA/CR,IA+CYA,EAAOC,QAAqD,IAApBD,EAAOE,YAFzD,uBAGb7E,GAAW,GAHE,SAIQS,YAAQ,yBAAD,OAA0BF,EAA1B,0BAJf,QAITG,EAJS,SAMTR,EAAiBQ,GANR,uBASbR,EAAiB,CAAC,CAAEe,eAAgB,GAAImC,YAAa,wBATxC,QAYrBpD,GAAW,GAZU,4CAAH,sDAchBN,GAAa,uCAAG,WAAOa,GAAP,eAAAC,EAAA,2DACdD,EAAK,GADS,qBAEV2D,EAAQQ,MAAK,SAAAC,GAAM,OA9DpB,KA8DwBA,EAAOC,QAAyC,IAApBD,EAAOE,YAFhD,uBAGVC,YAAmB,YACnB9E,GAAW,GAJD,SAKWS,YAAQ,4BAAD,OAA6BF,EAA7B,kBALlB,QAKNG,EALM,SAON4D,EAAc5D,GAPR,OAUdV,GAAW,GACX+E,YAAmB,WAAY,IAXjB,4CAAH,sDAoEnB,OARAxD,qBAAU,YArGiB,WACvB,UAAIyC,QAAJ,IAAIA,OAAJ,EAAIA,EAAOE,QAAS,CAAC,IAEXc,EADchB,EAAZE,QACmBe,QAAO,SAAAC,GAAI,OAtBnC,KAsBwCA,EAAKN,QArBjC,IAqBsDM,EAAKN,QApBjE,IAoBkGM,EAAKN,UAChHT,EAAWa,GAEfhF,GAAW,GAgGXmF,KACD,IAEH5D,qBAAU,WACNkD,MACD,CAACP,IAGA,kBAAC,IAAD,KACI,kBAAC1B,EAAA,EAAD,CAAKqB,UAAU,YACX,kBAACnB,EAAA,EAAD,CAAK0C,GAAI,IACL,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKxD,OAAN,KACI,kBAACwD,EAAA,EAAKtD,MAAN,CAAYC,GAAG,MAAf,eAEJ,kBAACqD,EAAA,EAAKpD,KAAN,KACI,kBAACO,EAAA,EAAD,CAAKqB,UAAU,4BACX,kBAACnB,EAAA,EAAD,KACI,kBAAC,iBAAD,CAAgBR,SAAU5B,EAAkB6B,cAAe7B,GACvD,kBAACiC,EAAA,EAAKC,IAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAYT,GAAIU,IAAKC,GAAG,KACpB,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAQ,YAApB,UACA,kBAAC,cAAD,CACIG,SArErB,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACpC3C,EAAiB2C,GACjBqB,EAAc,KAoE8BxB,KAAK,WACLvC,GAAG,WACHiB,aAAa,2BACbuB,UAAQ,GACR,4BAAQE,MAAM,IAAd,4BAEIxD,EAAU0D,KAAI,gBAAGhD,EAAH,EAAGA,SAAUiD,EAAb,EAAaA,YAAb,OACV,4BAAQH,MAAO9C,EAAUkD,IAAKlD,GAAWiD,QAMzD,kBAACb,EAAA,EAAKE,MAAN,CAAYT,GAAIU,IAAKC,GAAG,KACpB,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAQ,kBAApB,gBACA,kBAAC,cAAD,CACIG,SAlFhB,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MACzCvD,GAAcuD,IAkF8BH,KAAK,iBACLvC,GAAG,iBACHiB,aAAa,6BACbuB,UAAQ,GACR,4BAAQE,MAAM,IAAd,8BAEIhD,EAAckD,KAAI,gBAAGlC,EAAH,EAAGA,eAAgBmC,EAAnB,EAAmBA,YAAnB,OACd,4BAAQH,MAAOhC,EAAgBoC,IAAKpC,GAAiBmC,YASrF,kBAACZ,EAAA,EAAD,CAAKqB,UAAU,4BACX,kBAACnB,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAKmB,UAAU,aAAalB,GAAG,KAEvBuB,EAAQQ,MAAK,SAAAC,GAAM,OAtL5C,KAsLgDA,EAAOC,QAAyC,IAApBD,EAAOE,aAC1D,kBAACS,EAAA,EAAD,CAAQC,QAAQ,UAAU1B,UAAU,8BAA8BC,QAzJ9E,WACpBtE,GAAc,GACdgF,EAAeD,KAuJ6G,uBAAGV,UAAU,sBAAzG,wBAIZ,8BAEgB,IAAZ9D,EACI,kBAAC6B,EAAA,EAAD,MACE,oCAEMsC,EAAQQ,MAAK,SAAAC,GAAM,OAjMhD,KAiMoDA,EAAOC,QAAyC,IAApBD,EAAOE,YACtD,kBAACW,EAAA,EAAD,CAAOC,SAAO,EAACC,OAAK,EAACC,YAAU,EAACC,UAAQ,EAACrF,GAAG,WACxC,+BACI,4BACI,sCACA,yCACA,4CACA,sCAEI2D,EAAQQ,MAAK,SAAAC,GAAM,OA1MpE,KA0MyEA,EAAOC,QAAyC,IAApBD,EAAOE,UA1M5G,KA0MgIF,EAAOC,QAAyC,IAApBD,EAAOE,aAClH,+BAIZ,+BAEQR,EAAWlB,KAAI,gBAAG7B,EAAH,EAAGA,YAAa8B,EAAhB,EAAgBA,YAA0CyC,EAA1D,EAA6BC,aAAgB1C,YAAoD2C,EAAjG,EAA0EC,OAAU5C,YAApF,OACX,wBAAIC,IAAK/B,GACL,4BAAKA,GACL,4BAAK8B,GACL,4BAAKyC,GACL,4BAAKE,GAED7B,EAAQQ,MAAK,SAAAC,GAAM,OAxN5E,KAwNiFA,EAAOC,QAAyC,IAApBD,EAAOE,UAxNpH,KAwNwIF,EAAOC,QAAyC,IAApBD,EAAOE,aAClH,wBAAInB,MAAO,CAAEuC,UAAW,WAEhB/B,EAAQQ,MAAK,SAAAC,GAAM,OA3NpF,KA2NwFA,EAAOC,QAAyC,IAApBD,EAAOE,aAC1D,4BAAQhB,UAAU,+BAA+BC,QAAS,YA1IjH,SAACvD,GAAQ,IAAD,EACyD8D,EAAWK,MAAK,SAAAQ,GAAI,OAAIA,EAAK5D,cAAgBf,KAAvHe,EADiB,EACjBA,YAAaL,EADI,EACJA,eAAgBqC,EADZ,EACYA,kBAAmBF,EAD/B,EAC+BA,YAAaQ,EAD5C,EAC4CA,SAC7DzD,EAAaF,EAAcyE,MAAK,SAAAQ,GAAI,OAAIA,EAAKjE,iBAAmBA,KAAhEd,SACRqE,EAAe,CACXlD,cACAL,iBACAqC,oBACAF,cACAjD,WACAyD,aAEJpE,GAAc,GA+H4H0G,CAAa5E,KAAgB,uBAAGuC,UAAU,uBAG5GK,EAAQQ,MAAK,SAAAC,GAAM,OA/NpF,KA+NwFA,EAAOC,QAAyC,IAApBD,EAAOE,aAC1D,4BAAQhB,UAAU,iCAAiCC,QAAS,WAjInH,IAACvD,IAiIuIe,EAhI1I6E,IAAiBC,KACzBC,KAAK,CACRC,MAAO,UACPC,KAAM,6CACN9C,KAAM,UACN+C,iBAAiB,EACjBC,kBAAkB,IACnBC,KANH,uCAMQ,WAAOC,GAAP,iBAAAnG,EAAA,0DACAmG,EAAW1D,MADX,gCAGqBxC,YAAQ,aAAD,OAAcF,GAAM,CAC5CK,OAFS,WAFb,QAGIF,EAHJ,UAOIM,YAAcN,GACVkG,EAAOvC,EAAWY,QAAO,SAAAC,GAAI,OAAIA,EAAK5D,cAAgBf,KAC1D+D,EAAcsC,IATlB,sBAYAtE,YAAc,uCAZd,2CANR,yDA+HyK,uBAAGuB,UAAU,iCAS5I,kBAACgD,EAAA,EAAD,QAKH,IAAftH,GACA,kBAAC,EAAD,CAAiBA,WAAYA,EAAYC,cAAeA,EAAeC,UAAWA,EAAWC,cAAeA,GAAeJ,YAAaA,UCnPzJwH,UANO,WAClB,OACE,kBAAC,EAAD,Q,gCCLN,uFAGaD,EAAe,WACxB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOtB,QAAQ,UACX,kBAAC,IAAMwB,QAAP,CAAe/E,GAAG,MAAlB,mBACA,qFACA,6BACA,uBAAG6B,UAAU,QAAb,4E,gCCZxB,yFACAmD,IAAEC,UAAYC,EAAQ,KACtBA,EAAQ,KAED,IAAMnC,EAAqB,SAACoC,GAAuB,IAAdC,EAAa,uDAAP,GAC9CJ,IAAEG,GAAUF,UAAU,CAClBI,WAAW,EACXC,eAAe,EACfC,YAAY,EACZC,WAAY,CAAC,CAAC,GAAI,GAAI,IAAK,GAAI,CAAC,GAAI,GAAI,GAAI,UAC5CC,cAAeL,EACfM,SAAU,CACNC,WAAY,0BACZC,OAAQ,eACRJ,WAAY,uBACZK,KAAM,2CACNC,UAAW,iDACXC,aAAc,qCACdC,YAAa,GACbC,eAAgB,cAChBC,YAAa,gDACbC,WAAY,uBACZC,SAAU,CACNC,MAAO,UACPC,SAAU,WACVC,KAAM,YACNC,KAAM,UAEVC,KAAM,CACFC,cAAe,uDACfC,eAAgB,6DAKnB7D,EAAmB,SAACqC,GACzBH,IAAEG,GAAUF,YAAY2B","file":"static/js/24.616c0b18.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nexport const MunicipioUpSert = ({ dataInicial, abrirModal, setAbrirModal, catPaises, GetMunicipios }) => {\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false)\r\n    const [departamentos, setDepartamentos] = useState([]);\r\n    const [infoPais, handleChangeAuxPais] = useState(dataInicial.regionId);\r\n\r\n    const handleChangeRegion = ({ target: { value } }) => {\r\n        GetDepartamentos(value);\r\n        handleChangeAuxPais(value);\r\n    }\r\n    const GetDepartamentos = async (id) => {\r\n        setLoading(true);\r\n        let response = await callApi(`departamento?regionId=${id}&estadoId=1&include=0`);\r\n        setDepartamentos(response);\r\n        setLoading(false);\r\n    }\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('municipio', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Municipio registrado exitosamente\");\r\n            GetMunicipios(values.departamentoId);\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('municipio', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetMunicipios(values.departamentoId);\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.municipioId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        GetDepartamentos(dataInicial.regionId);\r\n    }, []);\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'capitalize';\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)}>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.municipioId > 0 ? 'Actualizar Municipio' : 'Nuevo Municipio'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"regionId\">Región</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"regionId\"\r\n                                            id=\"regionId\"\r\n                                            required\r\n                                            onChange={handleChangeRegion}\r\n                                            value={infoPais}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione una Región</option>\r\n                                            {\r\n                                                catPaises.map(({ regionId, descripcion }) => (\r\n                                                    <option value={regionId} key={regionId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"departamentoId\">Departamento</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"departamentoId\"\r\n                                            id=\"departamentoId\"\r\n                                            required\r\n                                            value={values.departamentoId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un Departamento</option>\r\n                                            {\r\n                                                departamentos.map(({ departamentoId, descripcion }) => (\r\n                                                    <option value={departamentoId} key={departamentoId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"municipioId_depto\">Código de Municipio</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"municipioId_depto\"\r\n                                            id=\"municipioId_depto\"\r\n                                            required\r\n                                            value={values.municipioId_depto}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Código de municipio según departamento\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"number\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Nombre</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"descripcion\"\r\n                                            id=\"descripcion\"\r\n                                            required\r\n                                            value={values.descripcion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Nombre\"\r\n                                            autoComplete=\"off\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.municipioId > 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.municipioId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Form, Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport { ValidationForm, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useSelector } from 'react-redux';\r\nimport Swal from 'sweetalert2';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { MunicipioUpSert } from './MunicipioUpSert';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nimport { asignarEstiloTabla, limpiarEstiloTabla } from '../../../helpers/estiloTabla';\r\nconst menuId = 10;\r\nconst menuIdDepartamento = 9;\r\nconst menuIdRegion = 8;\r\nexport const MunicipioListar = () => {\r\n    const state = useSelector(state => state);\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [loading, setLoading] = useState(true)\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catPaises, setCatPais] = useState([]);\r\n    const [departamentos, setDepartamentos] = useState([]);\r\n    const [municipios, setMunicipios] = useState([]);\r\n    const initData = {\r\n        departamentoId: '',\r\n        regionId: '',\r\n        descripcion: '',\r\n        municipioId_depto: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => (item.menuId === menuId || item.menuId === menuIdDepartamento || item.menuId === menuIdRegion));\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetPaises = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdRegion && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('region?include=0?estadoId=1');\r\n            if (response) {\r\n                setCatPais(response);\r\n            }\r\n        } else {\r\n            setCatPais([{ regionId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetDepartamentos = async (id) => {\r\n        if (id > 0) {\r\n            if (accesos.find(acceso => acceso.menuId === menuIdDepartamento && acceso.accesoId === 3)) {\r\n                setLoading(true);\r\n                let response = await callApi(`departamento?regionId=${id}&estadoId=1&include=0`);\r\n                if (response) {\r\n                    setDepartamentos(response);\r\n                }\r\n            } else {\r\n                setDepartamentos([{ departamentoId: '', descripcion: 'No esta autorizado' }]);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetMunicipios = async (id) => {\r\n        if (id > 0) {\r\n            if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n                limpiarEstiloTabla(\"#mytable\");\r\n                setLoading(true);\r\n                let response = await callApi(`municipio?departamentoId=${id}&estadoId=1;2`);\r\n                if (response) {\r\n                    setMunicipios(response);\r\n                }\r\n            }\r\n            setLoading(false);\r\n            asignarEstiloTabla(\"#mytable\", 25);\r\n        }\r\n    }\r\n\r\n    const handleChangeRegion = ({ target: { value } }) => {\r\n        GetDepartamentos(value);\r\n        setMunicipios([]);\r\n    }\r\n    const handleChageDepartamento = ({ target: { value } }) => {\r\n        GetMunicipios(value);\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { municipioId, departamentoId, municipioId_depto, descripcion, estadoId } = municipios.find(item => item.municipioId === id);\r\n        const { regionId } = departamentos.find(item => item.departamentoId === departamentoId);\r\n        setdataInicial({\r\n            municipioId,\r\n            departamentoId,\r\n            municipioId_depto,\r\n            descripcion,\r\n            regionId,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`municipio/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    let muns = municipios.filter(item => item.municipioId !== id);\r\n                    setMunicipios(muns);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetPaises();\r\n    }, [accesos])\r\n\r\n    return (\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Municipios</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Row className=\"align-items-center m-l-0\">\r\n                                <Col>\r\n                                    <ValidationForm onSubmit={GetDepartamentos} onErrorSubmit={GetDepartamentos}>\r\n                                        <Form.Row>\r\n                                            <Form.Group as={Col} md=\"6\">\r\n                                                <Form.Label htmlFor=\"regionId\">Region</Form.Label>\r\n                                                <SelectGroup\r\n                                                    onChange={handleChangeRegion}\r\n                                                    name=\"regionId\"\r\n                                                    id=\"regionId\"\r\n                                                    errorMessage=\"Seleccione una Región\"\r\n                                                    required>\r\n                                                    <option value=\"\">Seleccione una Región</option>\r\n                                                    {\r\n                                                        catPaises.map(({ regionId, descripcion }) => (\r\n                                                            <option value={regionId} key={regionId}>{descripcion}</option>\r\n                                                        ))\r\n                                                    }\r\n                                                </SelectGroup>\r\n\r\n                                            </Form.Group>\r\n                                            <Form.Group as={Col} md=\"6\">\r\n                                                <Form.Label htmlFor=\"departamentoId\">Departamento</Form.Label>\r\n                                                <SelectGroup\r\n                                                    onChange={handleChageDepartamento}\r\n                                                    name=\"departamentoId\"\r\n                                                    id=\"departamentoId\"\r\n                                                    errorMessage=\"Seleccione un Departamento\"\r\n                                                    required>\r\n                                                    <option value=\"\">Seleccione un Departamento</option>\r\n                                                    {\r\n                                                        departamentos.map(({ departamentoId, descripcion }) => (\r\n                                                            <option value={departamentoId} key={departamentoId}>{descripcion}</option>\r\n                                                        ))\r\n                                                    }\r\n                                                </SelectGroup>\r\n                                            </Form.Group>\r\n                                        </Form.Row>\r\n                                    </ValidationForm>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"align-items-center m-l-0\">\r\n                                <Col />\r\n                                <Col className=\"text-right\" md=\"2\">\r\n                                    {\r\n                                        accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                        <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Municipio</Button>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n                            <hr></hr>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"mytable\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>Codigo</th>\r\n                                                            <th>Municipio</th>\r\n                                                            <th>Departamento</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            municipios.map(({ municipioId, descripcion, Departamento: { descripcion: departamento }, Estado: { descripcion: estado } }) => (\r\n                                                                <tr key={municipioId}>\r\n                                                                    <td>{municipioId}</td>\r\n                                                                    <td>{descripcion}</td>\r\n                                                                    <td>{departamento}</td>\r\n                                                                    <td>{estado}</td>\r\n                                                                    {\r\n                                                                        accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                        <td style={{ textAlign: \"center\" }}>\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(municipioId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                            }\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(municipioId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                    }\r\n                                                                </tr>\r\n                                                            ))\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <MunicipioUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} catPaises={catPaises} GetMunicipios={GetMunicipios} dataInicial={dataInicial} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { MunicipioListar } from '../components/base/MunicipioListar'\r\n\r\nconst MunicipioPage = () => {\r\n    return (\r\n      <MunicipioListar/>\r\n    )\r\n}\r\n\r\nexport default MunicipioPage\r\n","import React from 'react'\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nexport const NoAutorizado = () => {\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading as=\"h4\">Información!</Alert.Heading>\r\n                        <p>No esta autorizado para poder visualizar los elementos</p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">Comuniquese con el administrador para la asignación de permisos</p>\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n","import $ from 'jquery';\r\n$.DataTable = require('datatables.net-bs');\r\nrequire('datatables.net-responsive-bs');\r\n\r\nexport const asignarEstiloTabla = (selector,filas=10) => {\r\n    $(selector).DataTable({\r\n        searching: true,\r\n        bLengthChange: false,\r\n        bAutoWidth: false,\r\n        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"Todos\"]],\r\n        displayLength: filas,\r\n        language: {\r\n            processing: \"Cargando información\",\r\n            search: \"Filtrar por:\",\r\n            lengthMenu: \"Mostrar _MENU_ filas\",\r\n            info: \"Vizualización  _END_ de _TOTAL_ filas\",\r\n            infoEmpty: \"Vizualización del elemento 0 a 0 de 0 filas\",\r\n            infoFiltered: \"(Filtrado de _MAX_ filas en total)\",\r\n            infoPostFix: \"\",\r\n            loadingRecords: \"Cargando...\",\r\n            zeroRecords: \"No se logró encontrar ninguna coincidencia\",\r\n            emptyTable: \"No existen registros\",\r\n            paginate: {\r\n                first: \"Primera\",\r\n                previous: \"Anterior\",\r\n                next: \"Siguiente\",\r\n                last: \"Ultima\"\r\n            },\r\n            aria: {\r\n                sortAscending: \": active para ordenar la columna en orden ascendente\",\r\n                sortDescending: \": active para ordenar la columna en orden descendente\"\r\n            }\r\n        }\r\n    });\r\n}\r\nexport const limpiarEstiloTabla=(selector)=>{\r\n        $(selector).DataTable().destroy();\r\n}"],"sourceRoot":""}