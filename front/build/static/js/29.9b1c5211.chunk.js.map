{"version":3,"sources":["App/components/base/SedeDiacoUpSert.js","App/components/base/SedeDiacoListar.js","App/pages/SedeDiacoPage.js","App/components/base/NoAutorizado.js","helpers/estiloTabla.js"],"names":["SedeDiacoUpSert","accesos","dataInicial","abrirModal","setAbrirModal","catRegiones","GetSedes","useForm","values","handleOnChange","useState","loading","setLoading","departamentos","setDepartamentos","listMunicipio","setListMunicipio","NuevoRegistro","a","callApi","method","body","JSON","stringify","alert_exitoso","GetDepartamentos","regionId","find","acceso","menuId","accesoId","response","departamentoId","descripcion","GetMunicipios","ActualizarRegistro","handleOnSubmit","e","preventDefault","sede_diacoId","useEffect","errorMessage","Modal","show","onHide","size","Loading","Header","closeButton","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","alert_warning","Form","Row","Group","Col","md","Label","htmlFor","name","id","required","value","codigo","onChange","style","textTransform","placeholder","autoComplete","type","nombre","multiline","rows","minLength","map","key","municipioId","estadoId","className","onClick","SedeDiacoListar","state","useSelector","setAccesos","setRegiones","listSedes","setListSedes","initData","setdataInicial","limpiarEstiloTabla","asignarEstiloTabla","GetRegiones","misAccesos","filter","item","GetAccesosByMenuId","sm","Card","Button","variant","Table","striped","hover","responsive","bordered","fecha_crea","Municipio","estado","Estado","descMunicipio","Departamento","descDepto","descRegion","Region","moment","format","textAlign","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","listActual","NoAutorizado","SedeDiacoPage","Heading","$","DataTable","require","selector","filas","searching","bLengthChange","bAutoWidth","lengthMenu","displayLength","language","processing","search","info","infoEmpty","infoFiltered","infoPostFix","loadingRecords","zeroRecords","emptyTable","paginate","first","previous","next","last","aria","sortAscending","sortDescending","destroy"],"mappings":"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","file":"static/js/29.9b1c5211.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nconst menuIdDepartamento = 9;\r\nconst menuIdMunicipio = 10;\r\nexport const SedeDiacoUpSert = ({ accesos, dataInicial, abrirModal, setAbrirModal, catRegiones, GetSedes }) => {\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false);\r\n    const [departamentos, setDepartamentos] = useState([]);\r\n    const [listMunicipio, setListMunicipio] = useState([]);\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('sedediaco', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Sede registrada exitosamente\");\r\n            GetSedes();\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const GetDepartamentos = async (regionId) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdDepartamento && acceso.accesoId === 3)) {\r\n            let response = await callApi(`departamento?include=0&regionId=${regionId}`);\r\n            if (response) {\r\n                setDepartamentos(response);\r\n            } else {\r\n                setDepartamentos([{ departamentoId: '', descripcion: 'NO ESTA AUTORIZADO' }]);\r\n            }\r\n        }\r\n    }\r\n    const GetMunicipios = async (departamentoId) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdMunicipio && acceso.accesoId === 3)) {\r\n            let response = await callApi(`municipio?include=0&departamentoId=${departamentoId}`);\r\n            if (response) {\r\n                setListMunicipio(response);\r\n            }\r\n        }\r\n    }\r\n\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('sedediaco', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetSedes();\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.sede_diacoId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (values?.regionId > 0) {\r\n            GetDepartamentos(values.regionId);\r\n        }\r\n    }, [values.regionId]);\r\n\r\n    useEffect(() => {\r\n        if (values?.regionId > 0) {\r\n            GetDepartamentos(values.regionId);\r\n            setListMunicipio([]);\r\n        }\r\n    }, [values.regionId]);\r\n\r\n    useEffect(() => {\r\n        if (values?.departamentoId > 0) {\r\n            GetMunicipios(values.departamentoId);\r\n        }\r\n    }, [values.departamentoId]);\r\n\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'capitalize';\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"xl\">\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.sede_diacoId > 0 ? 'Actualizar Sede' : 'Nueva Sede'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"codigo\">Código Interno</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"codigo\"\r\n                                            id=\"codigo\"\r\n                                            required\r\n                                            value={values.codigo}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            style={{ textTransform: textTransform }}\r\n                                            placeholder=\"Código Interno\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"nombre\">Nombre</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"nombre\"\r\n                                            id=\"nombre\"\r\n                                            required\r\n                                            value={values.nombre}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            style={{ textTransform: textTransform }}\r\n                                            placeholder=\"Nombre\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"descripcion\">Descripción</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"descripcion\"\r\n                                            id=\"descripcion\"\r\n                                            required\r\n                                            multiline\r\n                                            value={values.descripcion ?? ''}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Descripción\"\r\n                                            autoComplete=\"off\"\r\n                                            rows=\"3\"\r\n                                            minLength=\"5\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"regionId\">Region</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"regionId\"\r\n                                            id=\"regionId\"\r\n                                            required\r\n                                            value={values.regionId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione una Región</option>\r\n                                            {\r\n                                                catRegiones.map(({ regionId, descripcion }) => (\r\n                                                    <option value={regionId} key={regionId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"departamentoId\">Departamento</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"departamentoId\"\r\n                                            id=\"departamentoId\"\r\n                                            required\r\n                                            value={values.departamentoId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un Departamento</option>\r\n                                            {\r\n                                                departamentos.map(({ departamentoId, descripcion }) => (\r\n                                                    <option value={departamentoId} key={`${departamentoId}_depto`}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"municipioId\">Municipio</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"municipioId\"\r\n                                            id=\"municipioId\"\r\n                                            required\r\n                                            value={values.municipioId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un Municipio</option>\r\n                                            {\r\n                                                listMunicipio.map(({ municipioId, descripcion }) => (\r\n                                                    <option value={municipioId} key={`${municipioId}_muns`}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.sede_diacoId > 0 &&\r\n                                        <Form.Group as={Col} md=\"6\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.sede_diacoId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useSelector } from 'react-redux';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { limpiarEstiloTabla, asignarEstiloTabla } from '../../../helpers/estiloTabla';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nimport { SedeDiacoUpSert } from './SedeDiacoUpSert';\r\nconst menuId = 29;\r\nconst menuIdRegion = 8;\r\nconst menuIdDepartamento = 9;\r\nconst menuIdMunicipio = 10;\r\nexport const SedeDiacoListar = () => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catRegiones, setRegiones] = useState([]);\r\n    const [listSedes, setListSedes] = useState([]);\r\n    const initData = {\r\n        codigo: '',\r\n        nombre: '',\r\n        municipioId: '',\r\n        descripcion: '',\r\n        departamentoId:'',\r\n        regionId:'',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => (item.menuId === menuId || item.menuId === menuIdRegion || item.menuId === menuIdDepartamento || item.menuId === menuIdMunicipio));\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n\r\n    const GetSedes = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            limpiarEstiloTabla(\"#mytable\");\r\n            setLoading(true);\r\n            let response = await callApi('sedediaco?estadoId=1;2');\r\n            if (response) {\r\n                setListSedes(response);\r\n            }\r\n            setLoading(false);\r\n            asignarEstiloTabla(\"#mytable\");\r\n        }\r\n    }\r\n\r\n    const GetRegiones = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdRegion && acceso.accesoId === 3)) {\r\n            let response = await callApi('region?include=0?estadoId=1');\r\n            if (response) {\r\n                setRegiones(response);\r\n            }\r\n        } else {\r\n            setRegiones([{ regionId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n    }\r\n    \r\n    const handleEditar = (id) => {\r\n        const { sede_diacoId, codigo, nombre, municipioId, descripcion, estadoId,Municipio:{Departamento:{departamentoId,regionId}} } = listSedes.find(item => item.sede_diacoId === id);\r\n        setdataInicial({\r\n            sede_diacoId,\r\n            codigo,\r\n            nombre,\r\n            municipioId,\r\n            departamentoId,\r\n            regionId,\r\n            descripcion,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`sedediaco/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    limpiarEstiloTabla(\"#mytable\");\r\n                    let listActual = listSedes.filter(item => item.sede_diacoId !== id);\r\n                    setListSedes(listActual);\r\n                    asignarEstiloTabla(\"#mytable\");\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetSedes();\r\n        GetRegiones();\r\n    }, [accesos]);\r\n\r\n    return (\r\n        <Aux>\r\n\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Listado de Sedes Diaco</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Sede</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"mytable\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>No</th>\r\n                                                            <th>Código Interno</th>\r\n                                                            <th>Nombre</th>\r\n                                                            <th>Descripcion</th>\r\n                                                            <th>Region</th>\r\n                                                            <th>Departamento</th>\r\n                                                            <th>Municipio</th>\r\n                                                            <th>Fecha Ingreso</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            listSedes.map(({ sede_diacoId, codigo, nombre, descripcion, fecha_crea, Municipio, Estado: { descripcion: estado } }) => {\r\n                                                                let { descripcion: descMunicipio, Departamento } = Municipio;\r\n                                                                let { descripcion: descDepto, Region } = Departamento;\r\n                                                                let { descripcion: descRegion } = Region;\r\n                                                                return (\r\n                                                                    <tr key={sede_diacoId}>\r\n                                                                        <td>{sede_diacoId}</td>\r\n                                                                        <td>{codigo}</td>\r\n                                                                        <td>{nombre}</td>\r\n                                                                        <td>{descripcion}</td>\r\n                                                                        <td>{descRegion}</td>\r\n                                                                        <td>{descDepto}</td>\r\n                                                                        <td>{descMunicipio}</td>\r\n                                                                        <td>{moment(fecha_crea).format('DD/MM/YYYY')}</td>\r\n                                                                        <td>{estado}</td>\r\n                                                                        {\r\n                                                                            accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                            <td style={{ textAlign: \"center\" }}>\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                    <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(sede_diacoId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                                }\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                    <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(sede_diacoId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                                }\r\n                                                                            </td>\r\n                                                                        }\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            })\r\n\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <SedeDiacoUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} catRegiones={catRegiones} GetSedes={GetSedes} dataInicial={dataInicial} accesos={accesos} />\r\n                            }\r\n\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { SedeDiacoListar } from '../components/base/SedeDiacoListar'\r\n\r\nconst SedeDiacoPage = () => {\r\n    return (\r\n        <SedeDiacoListar/>\r\n    )\r\n}\r\n\r\nexport default SedeDiacoPage\r\n","import React from 'react'\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nexport const NoAutorizado = () => {\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading as=\"h4\">Información!</Alert.Heading>\r\n                        <p>No esta autorizado para poder visualizar los elementos</p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">Comuniquese con el administrador para la asignación de permisos</p>\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n","import $ from 'jquery';\r\n$.DataTable = require('datatables.net-bs');\r\nrequire('datatables.net-responsive-bs');\r\n\r\nexport const asignarEstiloTabla = (selector,filas=10) => {\r\n    $(selector).DataTable({\r\n        searching: true,\r\n        bLengthChange: false,\r\n        bAutoWidth: false,\r\n        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"Todos\"]],\r\n        displayLength: filas,\r\n        language: {\r\n            processing: \"Cargando información\",\r\n            search: \"Filtrar por:\",\r\n            lengthMenu: \"Mostrar _MENU_ filas\",\r\n            info: \"Vizualización  _END_ de _TOTAL_ filas\",\r\n            infoEmpty: \"Vizualización del elemento 0 a 0 de 0 filas\",\r\n            infoFiltered: \"(Filtrado de _MAX_ filas en total)\",\r\n            infoPostFix: \"\",\r\n            loadingRecords: \"Cargando...\",\r\n            zeroRecords: \"No se logró encontrar ninguna coincidencia\",\r\n            emptyTable: \"No existen registros\",\r\n            paginate: {\r\n                first: \"Primera\",\r\n                previous: \"Anterior\",\r\n                next: \"Siguiente\",\r\n                last: \"Ultima\"\r\n            },\r\n            aria: {\r\n                sortAscending: \": active para ordenar la columna en orden ascendente\",\r\n                sortDescending: \": active para ordenar la columna en orden descendente\"\r\n            }\r\n        }\r\n    });\r\n}\r\nexport const limpiarEstiloTabla=(selector)=>{\r\n        $(selector).DataTable().destroy();\r\n}"],"sourceRoot":""}