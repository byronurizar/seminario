{"version":3,"sources":["App/components/base/PersonaRegistrar.js","App/components/base/IdentificacionUpSert.js","App/components/base/IdentificacionListar.js","App/components/base/DireccionUpSert.js","App/components/base/DireccionListar.js","App/components/base/TelefonoUpSert.js","App/components/base/TelefonoListar.js","App/components/base/DatoExtraUpSert.js","App/components/base/DatoExtraListar.js","App/pages/PersonaUpSertPage.js","App/components/base/NoAutorizado.js"],"names":["PersonaRegistrar","handleSetIdPersona","personaId","state","useSelector","useState","loading","setLoading","accesos","setAccesos","useForm","nombre1","nombre2","nombre_otros","apellido1","apellido2","apellido_casada","fecha_nacimiento","email","generoId","estadoId","persona","handleOnChange","setValues","edit","setEdit","fNacimiento","setfNacimiento","NuevoRegistro","a","callApi","method","body","JSON","stringify","response","alert_exitoso","id","ActualizarRegistro","handleOnSubmit","e","preventDefault","GetInfoPersona","find","acceso","accesoId","Date","useEffect","misAccesos","filter","item","menuId","GetAccesosByMenuId","errorMessage","Loading","Card","Header","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","alert_warning","Form","Row","Group","Col","md","Label","htmlFor","name","placeholder","required","value","onChange","autoComplete","readOnly","style","textTransform","className","dateFormat","selected","fecha","fechaFormat","moment","format","placeholderText","maxDate","type","validator","isEmail","disabled","sm","Button","onClick","NoAutorizado","IdentificacionUpSert","dataInicial","abrirModal","setAbrirModal","catTipoDocumento","GetIdentificaciones","documento","identificacion_personaId","Modal","show","onHide","closeButton","tipo_documentoId","map","descripcion","key","numero_identificacion","minLength","IdentificacionListar","setCatTipoDocumento","identificaciones","setIdentificaciones","initData","setdataInicial","GetTiposIdentificaciones","variant","Table","striped","hover","responsive","bordered","tipoDoc","TipoDocumento","estado","Estado","textAlign","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","DireccionUpSert","catDepartamento","GetDirecciones","direccion","departamentoId","setDepartamentoId","catMunicipio","setCatMunicipio","direccion_personaId","GetMunicipio","municipioId","size","target","multiline","rows","punto_referencia","DireccionListar","setCatDepartamento","direcciones","setDirecciones","GetDepartamentos","Municipio","municipio","departamento","Departamento","TelefonoUpSert","catTipoTelefono","GetTelefonos","telefono","telefono_personaId","tipo_telefonoId","TelefonoListar","setCatTipoTelefono","telefonos","setTelefonos","GetTipoTelefono","tipoTelefono","TipoTelefono","DatoExtraUpSert","catTipoSangre","catEstadoCivil","GetDatoExtra","datoExtra","dato_extra_personaId","tipo_sangreId","estado_civilId","DatoExtraListar","setTipoSangre","setCatEstadoCivil","setDatoExtra","GetTipoSangre","GetEstadoCivil","length","TipoSangre","EstadoCivil","tipoSangre","estadoCivil","PersonaUpSertPage","match","idpersona","params","codigoPersona","atob","split","setPersonaId","Tab","Container","defaultActiveKey","Nav","Item","Link","eventKey","Content","Pane","Heading"],"mappings":"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","file":"static/js/33.446e8c2f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Col, Card, Form, Button } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport { useSelector } from 'react-redux';\r\nimport validator from 'validator';\r\nimport moment from 'moment';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nconst menuId = 12;\r\nexport const PersonaRegistrar = ({ handleSetIdPersona, personaId }) => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [persona, handleOnChange, , setValues] = useForm({\r\n        nombre1: '',\r\n        nombre2: '',\r\n        nombre_otros: '',\r\n        apellido1: '',\r\n        apellido2: '',\r\n        apellido_casada: '',\r\n        fecha_nacimiento: '',\r\n        email: '',\r\n        generoId: '',\r\n        estadoId: 1\r\n    });\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [edit, setEdit] = useState(true);\r\n    const [fNacimiento, setfNacimiento] = useState('');\r\n\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('persona', {\r\n            method: 'POST',\r\n            body: JSON.stringify(persona)\r\n        });\r\n        if (response) {\r\n            alert_exitoso(\"Persona registrada exitosamente\");\r\n            const { personaId: id } = response;\r\n            handleSetIdPersona(id);\r\n            setEdit(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('persona', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(persona)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            setEdit(false);\r\n        }\r\n    }\r\n\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (personaId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const GetInfoPersona = async (id) => {\r\n        if (id > 0) {\r\n            if (accesos.find(acceso => acceso.accesoId === 3)) {\r\n                setLoading(true);\r\n                let response = await callApi(`persona?id=${id}&include=0`);\r\n                if (response) {\r\n                    setValues(response[0]);\r\n                    setfNacimiento(new Date(response[0].fecha_nacimiento));\r\n                    setEdit(false);\r\n                }\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    const handleSetFecha = (fecha) => {\r\n        const fechaFormat = moment(fecha).format('YYYY/MM/DD');\r\n        setValues({ ...persona, fecha_nacimiento: fechaFormat });\r\n        setfNacimiento(fecha);\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, [state.accesos]);\r\n\r\n    useEffect(() => {\r\n        if (personaId) {\r\n            GetInfoPersona(personaId);\r\n        }\r\n    }, [personaId, accesos])\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'uppercase';\r\n    return (\r\n        <>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        {\r\n                            accesos.find(acceso => acceso.accesoId === 1 || acceso.accesoId === 2) ?\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <Card.Title as=\"h5\">Datos Personales</Card.Title>\r\n                                    </Card.Header>\r\n                                    <Card.Body>\r\n                                        <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                            <Form.Row>\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"nombre1\">Primer Nombre</Form.Label>\r\n                                                    <TextInput\r\n                                                        name=\"nombre1\"\r\n                                                        id=\"nombre1\"\r\n                                                        errorMessage={errorMessage}\r\n                                                        placeholder=\"Primer Nombre\"\r\n                                                        required value={persona.nombre1}\r\n                                                        onChange={handleOnChange}\r\n                                                        autoComplete=\"off\"\r\n                                                        readOnly={!edit}\r\n                                                        style={{ textTransform: textTransform }}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"nombre2\">Segundo Nombre</Form.Label>\r\n                                                    <TextInput\r\n                                                        name=\"nombre2\"\r\n                                                        id=\"nombre2\"\r\n                                                        placeholder=\"Segundo Nombre\"\r\n                                                        value={persona.nombre2}\r\n                                                        onChange={handleOnChange}\r\n                                                        autoComplete=\"off\"\r\n                                                        readOnly={!edit}\r\n                                                        style={{ textTransform: textTransform }}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"nombre_otros\">Otros Nombres</Form.Label>\r\n                                                    <TextInput\r\n                                                        name=\"nombre_otros\"\r\n                                                        id=\"nombre_otros\"\r\n                                                        placeholder=\"Otros Nombres\"\r\n                                                        value={persona.nombre_otros}\r\n                                                        onChange={handleOnChange}\r\n                                                        autoComplete=\"off\"\r\n                                                        readOnly={!edit}\r\n                                                        style={{ textTransform: textTransform }}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"apellido1\">Primer Apellido</Form.Label>\r\n                                                    <TextInput\r\n                                                        name=\"apellido1\"\r\n                                                        id=\"apellido1\"\r\n                                                        placeholder=\"Primer Apellido\"\r\n                                                        errorMessage={errorMessage}\r\n                                                        required\r\n                                                        value={persona.apellido1}\r\n                                                        onChange={handleOnChange}\r\n                                                        autoComplete=\"off\"\r\n                                                        readOnly={!edit}\r\n                                                        style={{ textTransform: textTransform }}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"apellido2\">Segundo Apellido</Form.Label>\r\n                                                    <TextInput\r\n                                                        name=\"apellido2\"\r\n                                                        id=\"apellido2\"\r\n                                                        placeholder=\"Segundo Apellido\"\r\n                                                        value={persona.apellido2}\r\n                                                        onChange={handleOnChange}\r\n                                                        autoComplete=\"off\"\r\n                                                        readOnly={!edit}\r\n                                                        style={{ textTransform: textTransform }}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"apellido_casada\">Apellido de Casada</Form.Label>\r\n                                                    <TextInput\r\n                                                        name=\"apellido_casada\"\r\n                                                        id=\"apellido_casada\"\r\n                                                        placeholder=\"Apellido de Casada\"\r\n                                                        value={persona.apellido_casada}\r\n                                                        onChange={handleOnChange}\r\n                                                        autoComplete=\"off\"\r\n                                                        readOnly={!edit}\r\n                                                        style={{ textTransform: textTransform }}\r\n                                                    />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"fecha_nacimiento\">Fecha de Nacimiento</Form.Label>\r\n                                                    <div className=\"form-group\">\r\n                                                        <DatePicker\r\n                                                            id=\"fecha_nacimiento\"\r\n                                                            name=\"fecha_nacimiento\"\r\n                                                            dateFormat=\"dd/MM/yyyy\"\r\n                                                            selected={fNacimiento}\r\n                                                            onChange={handleSetFecha}\r\n                                                            required\r\n                                                            errorMessage={errorMessage}\r\n                                                            className=\"form-control\"\r\n                                                            placeholderText=\"dd/MM/yyyy\"\r\n                                                            autoComplete=\"off\"\r\n                                                            maxDate={new Date()}\r\n                                                            readOnly={!edit}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"email\">Correo Electrónico</Form.Label>\r\n                                                    <TextInput\r\n                                                        name=\"email\"\r\n                                                        id=\"email\"\r\n                                                        type=\"email\"\r\n                                                        placeholder=\"Correo Electrónico\"\r\n                                                        validator={validator.isEmail}\r\n                                                        required\r\n                                                        errorMessage={{ validator: \"Por favor ingrese un correo válido\" }}\r\n                                                        value={persona.email}\r\n                                                        onChange={handleOnChange}\r\n                                                        autoComplete=\"off\"\r\n                                                        readOnly={!edit}\r\n                                                        style={{ textTransform: 'lowercase' }}\r\n                                                    />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Col} md=\"6\">\r\n                                                    <Form.Label htmlFor=\"generoId\">Género</Form.Label>\r\n                                                    <SelectGroup\r\n                                                        name=\"generoId\"\r\n                                                        id=\"generoId\"\r\n                                                        value={persona.generoId}\r\n                                                        disabled={!edit}\r\n                                                        required\r\n                                                        errorMessage={errorMessage}\r\n                                                        onChange={handleOnChange}>\r\n                                                        <option value=\"\">Seleccione un género</option>\r\n                                                        <option value=\"1\">Masculino</option>\r\n                                                        <option value=\"2\">Femenino</option>\r\n                                                    </SelectGroup>\r\n                                                </Form.Group>\r\n\r\n                                                {\r\n                                                    personaId > 0 &&\r\n                                                    <Form.Group as={Col} md=\"6\">\r\n                                                        <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                                        <SelectGroup\r\n                                                            name=\"estadoId\"\r\n                                                            id=\"estadoId\"\r\n                                                            value={persona.estadoId}\r\n                                                            disabled={!edit}\r\n                                                            required\r\n                                                            errorMessage={errorMessage}\r\n                                                            onChange={handleOnChange}>\r\n                                                            <option value=\"\">Seleccione un estado</option>\r\n                                                            <option value=\"1\">Activo</option>\r\n                                                            <option value=\"2\">Inactivo</option>\r\n                                                        </SelectGroup>\r\n                                                    </Form.Group>\r\n                                                }\r\n\r\n                                                <Form.Group as={Col} sm={12} className=\"mt-3\">\r\n                                                    <Button type=\"submit\" className=\"btn btn-primary mr-2\" disabled={(!edit && personaId > 0)}>{personaId > 0 ? 'Actualizar' : 'Registrar'}</Button>\r\n                                                    {\r\n                                                        personaId > 0 &&\r\n                                                        <Button type=\"button\" className=\"btn btn-success\" disabled={edit} onClick={() => { setEdit(!edit) }}>Editar</Button>\r\n                                                    }\r\n                                                </Form.Group>\r\n                                            </Form.Row>\r\n                                        </ValidationForm>\r\n\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                : <NoAutorizado />\r\n                        }\r\n                    </>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nexport const IdentificacionUpSert = ({ dataInicial, personaId, abrirModal, setAbrirModal, catTipoDocumento, GetIdentificaciones }) => {\r\n    const [documento, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false)\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('persona/identificacion', {\r\n            method: 'POST',\r\n            body: JSON.stringify(documento)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Documento de identificación registrado exitosamente\");\r\n            GetIdentificaciones(personaId);\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('persona/identificacion', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(documento)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetIdentificaciones(personaId);\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.identificacion_personaId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)}>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.identificacion_personaId > 0 ? 'Actualizar documento' : 'Nuevo Documento'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"tipo_documentoId\">Tipo Identificación</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"tipo_documentoId\"\r\n                                            id=\"tipo_documentoId\"\r\n                                            required\r\n                                            value={documento.tipo_documentoId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un tipo de identificación</option>\r\n                                            {\r\n                                                catTipoDocumento.map(({ tipo_documentoId, descripcion }) => (\r\n                                                    <option value={tipo_documentoId} key={tipo_documentoId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"numero_identificacion\">Número de Identificación</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"numero_identificacion\"\r\n                                            id=\"numero_identificacion\"\r\n                                            required\r\n                                            value={documento.numero_identificacion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            minLength={documento.tipo_documentoId === \"1\" ? \"13\" : \"0\"}\r\n                                            placeholder=\"Número de identificación\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"number\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.identificacion_personaId > 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={documento.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.identificacion_personaId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useSelector } from 'react-redux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport { IdentificacionUpSert } from './IdentificacionUpSert';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nconst menuId = 13;\r\nconst menuIdTipoDocumento = 5;\r\nexport const IdentificacionListar = ({ personaId }) => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catTipoDocumento, setCatTipoDocumento] = useState([]);\r\n    const [identificaciones, setIdentificaciones] = useState([]);\r\n    const initData = {\r\n        personaId,\r\n        tipo_documentoId: '',\r\n        numero_identificacion: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdTipoDocumento);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetTiposIdentificaciones = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdTipoDocumento && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('tipodocumento?estadoId=1&include=0');\r\n            if (response) {\r\n                setCatTipoDocumento(response);\r\n            }\r\n        } else {\r\n            setCatTipoDocumento([{ tipo_documentoId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetIdentificaciones = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi(`persona/identificacion?personaId=${id}&estadoId=1;2`);\r\n            if (response) {\r\n                setIdentificaciones(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { identificacion_personaId, tipo_documentoId, numero_identificacion, estadoId } = identificaciones.find(item => item.identificacion_personaId === id);\r\n        setdataInicial({\r\n            identificacion_personaId,\r\n            tipo_documentoId,\r\n            numero_identificacion,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`persona/identificacion/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    GetIdentificaciones(personaId);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetTiposIdentificaciones();\r\n        if (personaId) {\r\n            GetIdentificaciones(personaId);\r\n        }\r\n    }, [personaId, accesos]);\r\n    return (\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Documentos de identificación</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar documento</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"table_dentificaciones_persona\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>No.</th>\r\n                                                            <th>Tipo</th>\r\n                                                            <th>Número</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            identificaciones.map(({ identificacion_personaId, TipoDocumento: { descripcion: tipoDoc }, numero_identificacion, Estado: { descripcion: estado } }) => (\r\n                                                                <tr key={identificacion_personaId}>\r\n                                                                    <td>{identificacion_personaId}</td>\r\n                                                                    <td>{tipoDoc}</td>\r\n                                                                    <td>{numero_identificacion}</td>\r\n                                                                    <td>{estado}</td>\r\n                                                                    {\r\n                                                                        accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                        <td style={{ textAlign: \"center\" }}>\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(identificacion_personaId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                            }\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(identificacion_personaId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                    }\r\n                                                                </tr>\r\n                                                            ))\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <IdentificacionUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} catTipoDocumento={catTipoDocumento} personaId={personaId} GetIdentificaciones={GetIdentificaciones} dataInicial={dataInicial} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport { useSelector } from 'react-redux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nconst menuIdMunicipio = 10;\r\nexport const DireccionUpSert = ({ dataInicial, personaId, abrirModal, setAbrirModal, catDepartamento, GetDirecciones }) => {\r\n    const state = useSelector(state => state);\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [loading, setLoading] = useState(false)\r\n    const [direccion, handleOnChange] = useForm(dataInicial);\r\n    const [departamentoId, setDepartamentoId] = useState('');\r\n    const [catMunicipio, setCatMunicipio] = useState([]);\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuIdMunicipio);\r\n            setAccesos(misAccesos);\r\n        }\r\n    }\r\n\r\n    const onchangeDepartamento = ({ target }) => {\r\n        setDepartamentoId(target.value)\r\n    }\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('persona/direccion', {\r\n            method: 'POST',\r\n            body: JSON.stringify(direccion)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Dirección registrada exitosamente\");\r\n            GetDirecciones(personaId);\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('persona/direccion', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(direccion)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetDirecciones(personaId);\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    useEffect(() => {\r\n        if (dataInicial.departamentoId) {\r\n            setDepartamentoId(dataInicial.departamentoId);\r\n        }\r\n    }, [dataInicial.departamentoId])\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.direccion_personaId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n    const GetMunicipio = async (id) => {\r\n        if (id > 0) {\r\n            if (accesos.find(acceso => acceso.menuId === menuIdMunicipio && acceso.accesoId === 3)) {\r\n                setLoading(true);\r\n                let response = await callApi(`municipio?departamentoId=${id}&estadoId=1&include=0`);\r\n                if (response) {\r\n                    setCatMunicipio(response);\r\n                }\r\n            } else {\r\n                setCatMunicipio([{ municipioId: '', descripcion: 'No esta autorizado' }]);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetMunicipio(departamentoId);\r\n    }, [departamentoId, accesos]);\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'capitalize';\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size='lg'>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.direccion_personaId > 0 ? 'Actualizar dirección' : 'Nueva dirección'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"departamentoId\">Departamento</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"departamentoId\"\r\n                                            id=\"departamentoId\"\r\n                                            required\r\n                                            value={departamentoId}\r\n                                            onChange={onchangeDepartamento}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un departamento</option>\r\n                                            {\r\n                                                catDepartamento.map(({ departamentoId, descripcion }) => (\r\n                                                    <option value={departamentoId} key={departamentoId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"municipioId\">Municipio</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"municipioId\"\r\n                                            id=\"municipioId\"\r\n                                            required\r\n                                            value={direccion.municipioId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un municipio</option>\r\n                                            {\r\n                                                catMunicipio.map(({ municipioId, descripcion }) => (\r\n                                                    <option value={municipioId} key={municipioId}>{descripcion}</option>\r\n                                                ))\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"direccion\">Dirección</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"direccion\"\r\n                                            id=\"direccion\"\r\n                                            required\r\n                                            multiline\r\n                                            value={direccion.direccion}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Dirección\"\r\n                                            autoComplete=\"off\"\r\n                                            rows=\"3\"\r\n                                            minLength=\"5\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"punto_referencia\">Punto de referencia</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"punto_referencia\"\r\n                                            id=\"punto_referencia\"\r\n                                            required\r\n                                            multiline\r\n                                            value={direccion.punto_referencia}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Punto de referencia\"\r\n                                            autoComplete=\"off\"\r\n                                            rows=\"3\"\r\n                                            minLength=\"5\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.direccion_personaId > 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={direccion.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.direccion_personaId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useSelector } from 'react-redux';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { DireccionUpSert } from './DireccionUpSert';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nconst menuId = 15;\r\nconst menuIdDepartamento = 9;\r\nexport const DireccionListar = ({ personaId }) => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catDepartamento, setCatDepartamento] = useState([]);\r\n    const [direcciones, setDirecciones] = useState([]);\r\n    const initData = {\r\n        personaId,\r\n        municipioId: '',\r\n        direccion: '',\r\n        punto_referencia: '',\r\n        estadoId: 1\r\n    };\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdDepartamento);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetDepartamentos = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdDepartamento && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('departamento?estadoId=1&include=0');\r\n            if (response) {\r\n                setCatDepartamento(response);\r\n            }\r\n        } else {\r\n            setCatDepartamento([{ departamentoId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetDirecciones = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi(`persona/direccion?personaId=${id}&estadoId=1;2`);\r\n            if (response) {\r\n                setDirecciones(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { direccion_personaId, municipioId, direccion, punto_referencia, estadoId, Municipio: { Departamento: { departamentoId } } } = direcciones.find(item => item.direccion_personaId === id);\r\n        setdataInicial({\r\n            direccion_personaId,\r\n            municipioId,\r\n            direccion,\r\n            punto_referencia,\r\n            departamentoId,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`persona/direccion/${id}&estadoId=1;2`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    GetDirecciones(personaId);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetDepartamentos();\r\n        if(personaId){\r\n        GetDirecciones(personaId);\r\n        }\r\n    }, [personaId, accesos]);\r\n    return (\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Direcciones</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar dirección</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"table_dentificaciones_persona\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>No.</th>\r\n                                                            <th>Departamento</th>\r\n                                                            <th>Municipio</th>\r\n                                                            <th>Direccion</th>\r\n                                                            <th>Punto de Referencia</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            direcciones.map(({ direccion_personaId, direccion, punto_referencia, Municipio: { descripcion: municipio, Departamento: { descripcion: departamento } }, Estado: { descripcion: estado } }) => (\r\n                                                                <tr key={direccion_personaId}>\r\n                                                                    <td>{direccion_personaId}</td>\r\n                                                                    <td>{departamento}</td>\r\n                                                                    <td>{municipio}</td>\r\n                                                                    <td>{direccion}</td>\r\n                                                                    <td>{punto_referencia}</td>\r\n                                                                    <td>{estado}</td>\r\n                                                                    {\r\n                                                                        accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                        <td style={{ textAlign: \"center\" }}>\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(direccion_personaId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                            }\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(direccion_personaId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                    }\r\n                                                                </tr>\r\n                                                            ))\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <DireccionUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} catDepartamento={catDepartamento} personaId={personaId} GetDirecciones={GetDirecciones} dataInicial={dataInicial} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nexport const TelefonoUpSert = ({ dataInicial, personaId, abrirModal, setAbrirModal, catTipoTelefono, GetTelefonos }) => {\r\n    const [telefono, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false)\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('persona/telefono', {\r\n            method: 'POST',\r\n            body: JSON.stringify(telefono)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Número de teléfono registrado exitosamente\");\r\n            GetTelefonos(personaId);\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('persona/telefono', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(telefono)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetTelefonos(personaId);\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.telefono_personaId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)}>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.telefono_personaId > 0 ? 'Actualizar teléfono' : 'Nuevo teléfono'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"tipo_telefonoId\">Tipo Identificación</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"tipo_telefonoId\"\r\n                                            id=\"tipo_telefonoId\"\r\n                                            required\r\n                                            value={telefono.tipo_telefonoId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un tipo de teléfono</option>\r\n                                            {\r\n                                                catTipoTelefono.map(({ tipo_telefonoId, descripcion }) => (\r\n                                                    <option value={tipo_telefonoId} key={tipo_telefonoId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"telefono\">Número de teléfono</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"telefono\"\r\n                                            id=\"telefono\"\r\n                                            required\r\n                                            value={telefono.telefono}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Número de teléfono\"\r\n                                            autoComplete=\"off\"\r\n                                            minLength=\"8\"\r\n                                            type=\"number\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.telefono_personaId > 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={telefono.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.telefono_personaId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useSelector } from 'react-redux';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { TelefonoUpSert } from './TelefonoUpSert';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nconst menuId = 14;\r\nconst menuIdTipoTelefono = 7;\r\nexport const TelefonoListar = ({ personaId }) => {\r\n    const state = useSelector(state => state);\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [loading, setLoading] = useState(true)\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catTipoTelefono, setCatTipoTelefono] = useState([]);\r\n    const [telefonos, setTelefonos] = useState([]);\r\n    const initData = {\r\n        personaId,\r\n        tipo_telefonoId: '',\r\n        telefono: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdTipoTelefono);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetTipoTelefono = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdTipoTelefono && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('tipotelefono?estadoId=1&include=0');\r\n            if (response) {\r\n                setCatTipoTelefono(response);\r\n            }\r\n        } else {\r\n            setCatTipoTelefono([{ tipo_telefonoId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetTelefonos = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi(`persona/telefono?personaId=${id}&estadoId=1;2`);\r\n            if (response) {\r\n                setTelefonos(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const handleEditar = (id) => {\r\n        const { telefono_personaId, tipo_telefonoId, telefono, estadoId } = telefonos.find(item => item.telefono_personaId === id);\r\n        setdataInicial({\r\n            telefono_personaId,\r\n            tipo_telefonoId,\r\n            telefono,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`persona/telefono/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    GetTelefonos(personaId);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetTipoTelefono();\r\n        if (personaId) {\r\n            GetTelefonos(personaId);\r\n        }\r\n    }, [personaId, accesos]);\r\n    return (\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Documentos de identificación</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar teléfono</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"table_dentificaciones_persona\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>No.</th>\r\n                                                            <th>Tipo</th>\r\n                                                            <th>Número</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            telefonos.map(({ telefono_personaId, TipoTelefono: { descripcion: tipoTelefono }, telefono, Estado: { descripcion: estado } }) => (\r\n                                                                <tr key={telefono_personaId}>\r\n                                                                    <td>{telefono_personaId}</td>\r\n                                                                    <td>{tipoTelefono}</td>\r\n                                                                    <td>{telefono}</td>\r\n                                                                    <td>{estado}</td>\r\n                                                                    {\r\n                                                                        accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                        <td style={{ textAlign: \"center\" }}>\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(telefono_personaId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                            }\r\n                                                                            {\r\n                                                                                accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(telefono_personaId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                            }\r\n                                                                        </td>\r\n                                                                    }\r\n                                                                </tr>\r\n                                                            ))\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <TelefonoUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} catTipoTelefono={catTipoTelefono} personaId={personaId} GetTelefonos={GetTelefonos} dataInicial={dataInicial} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport Loading from './Loading';\r\nexport const DatoExtraUpSert = ({ dataInicial, personaId, abrirModal, setAbrirModal, catTipoSangre, catEstadoCivil, GetDatoExtra }) => {\r\n    const [datoExtra, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false)\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('persona/datoextra', {\r\n            method: 'POST',\r\n            body: JSON.stringify(datoExtra)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Información adicional registrada exitosamente\");\r\n            GetDatoExtra(personaId);\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('persona/datoextra', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(datoExtra)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetDatoExtra(personaId);\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.dato_extra_personaId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)}>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.dato_extra_personaId > 0 ? 'Actualizar información adicional' : 'Registrar información adicional'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"tipo_sangreId\">Tipo sangre</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"tipo_sangreId\"\r\n                                            id=\"tipo_sangreId\"\r\n                                            value={datoExtra.tipo_sangreId}\r\n                                            onChange={handleOnChange}\r\n                                            required\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un tipo de sangre</option>\r\n                                            {\r\n                                                catTipoSangre.map(({ tipo_sangreId, descripcion }) => (\r\n                                                    <option value={tipo_sangreId} key={tipo_sangreId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"estado_civilId\">Estado civil</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"estado_civilId\"\r\n                                            id=\"estado_civilId\"\r\n                                            value={datoExtra.estado_civilId}\r\n                                            onChange={handleOnChange}\r\n                                            required\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un estado civil</option>\r\n                                            {\r\n                                                catEstadoCivil.map(({ estado_civilId, descripcion }) => (\r\n                                                    <option value={estado_civilId} key={estado_civilId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    {\r\n                                        dataInicial.dato_extra_personaId > 0 &&\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={datoExtra.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.dato_extra_personaId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useSelector } from 'react-redux';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { DatoExtraUpSert } from './DatoExtraUpSert';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nconst menuId = 16;\r\nconst menuIdEstadoCivil = 4;\r\nconst menuIdTipoSangre = 6;\r\nexport const DatoExtraListar = ({ personaId }) => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catTipoSangre, setTipoSangre] = useState([]);\r\n    const [catEstadoCivil, setCatEstadoCivil] = useState([]);\r\n    const [datoExtra, setDatoExtra] = useState([]);\r\n    const initData = {\r\n        personaId,\r\n        tipo_sangreId: '',\r\n        estado_civilId: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdEstadoCivil || item.menuId === menuIdTipoSangre);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetTipoSangre = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdTipoSangre && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('tiposangre?estadoId=1&include=0');\r\n            if (response) {\r\n                setTipoSangre(response);\r\n            }\r\n        } else {\r\n            setTipoSangre([{ tipo_sangreId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetEstadoCivil = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdEstadoCivil && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('estadocivil?estadoId=1&include=0');\r\n            if (response) {\r\n                setCatEstadoCivil(response);\r\n            }\r\n        } else {\r\n            setCatEstadoCivil([{ estado_civilId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetDatoExtra = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi(`persona/datoextra?personaId=${id}&estadoId=1;2`);\r\n            if (response) {\r\n                setDatoExtra(response);\r\n            }\r\n            setLoading(false);\r\n        }\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { dato_extra_personaId, tipo_sangreId, estado_civilId, estadoId } = datoExtra.find(item => item.dato_extra_personaId === id);\r\n        setdataInicial({\r\n            dato_extra_personaId,\r\n            tipo_sangreId,\r\n            estado_civilId,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`persona/datoextra/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    GetDatoExtra(personaId);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetTipoSangre();\r\n        GetEstadoCivil();\r\n        if (personaId) {\r\n            GetDatoExtra(personaId);\r\n        }\r\n    }, [personaId, accesos]);\r\n    return (\r\n        <Aux>\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">Información adicional</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                            <Col />\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) && datoExtra.length <= 0) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Información adicional</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"table_dentificaciones_persona\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>No.</th>\r\n                                                            <th>Tipo de Sangre</th>\r\n                                                            <th>Estado Civil</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            datoExtra.map((item) => {\r\n                                                                const { dato_extra_personaId, TipoSangre, EstadoCivil, Estado: { descripcion: estado } } = item;\r\n                                                                const { descripcion: tipoSangre } = !!TipoSangre && TipoSangre;\r\n                                                                const { descripcion: estadoCivil } = !!EstadoCivil && EstadoCivil;\r\n                                                                return (\r\n                                                                    <tr key={dato_extra_personaId}>\r\n                                                                        <td>{dato_extra_personaId}</td>\r\n                                                                        <td>{tipoSangre}</td>\r\n                                                                        <td>{estadoCivil}</td>\r\n                                                                        <td>{estado}</td>\r\n                                                                        {\r\n                                                                            accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                            <td style={{ textAlign: \"center\" }}>\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                    <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(dato_extra_personaId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                                }\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                    <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(dato_extra_personaId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                                }\r\n                                                                            </td>\r\n                                                                        }\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <DatoExtraUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} catTipoSangre={catTipoSangre} catEstadoCivil={catEstadoCivil} personaId={personaId} GetDatoExtra={GetDatoExtra} dataInicial={dataInicial} />\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\r\nimport Aux from '../../hoc/_Aux'\r\nimport { PersonaRegistrar } from '../components/base/PersonaRegistrar'\r\nimport { IdentificacionListar } from '../components/base/IdentificacionListar';\r\nimport { DireccionListar } from '../components/base/DireccionListar';\r\nimport { TelefonoListar } from '../components/base/TelefonoListar';\r\nimport { DatoExtraListar } from '../components/base/DatoExtraListar';\r\nimport { useSelector } from 'react-redux';\r\nconst menuId = 12;\r\nconst menuIdIdentificacionPersona = 13;\r\nconst menuIdTelefonoPersona = 14;\r\nconst menuIdDireccionPersona = 15;\r\nconst menuIdDatoExtraPersona = 16;\r\n\r\nconst PersonaUpSertPage = ({ match }) => {\r\n    const state = useSelector(state => state);\r\n    const [accesos, setAccesos] = useState([]);\r\n    let { idpersona } = match.params;\r\n    idpersona = !idpersona ? \"\" : idpersona;\r\n    let codigoPersona=atob(idpersona).split('=')[1];\r\n    const [personaId, setPersonaId] = useState(codigoPersona);\r\n    const handleSetIdPersona = (id) => {\r\n        setPersonaId(id);\r\n    }\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => (item.menuId === menuId || item.menuId === menuIdIdentificacionPersona || item.menuId === menuIdTelefonoPersona || item.menuId === menuIdDireccionPersona || item.menuId === menuIdDatoExtraPersona));\r\n            setAccesos(misAccesos);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title as='h5'>\r\n                                {\r\n                                    personaId > 0 ? 'Actualización de Información de Persona' : 'Registro de Información de Persona'\r\n                                }\r\n                            </Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Tab.Container defaultActiveKey=\"persona\">\r\n                                <Row>\r\n                                    <Col sm={2}>\r\n                                        <Nav variant=\"pills\" className=\"flex-column\">\r\n                                            {\r\n                                                accesos.find(acceso => acceso.menuId === menuId) &&\r\n                                                <Nav.Item>\r\n                                                    <Nav.Link eventKey=\"persona\">Persona</Nav.Link>\r\n                                                </Nav.Item>\r\n                                            }\r\n\r\n                                            {\r\n                                                accesos.find(acceso => acceso.menuId === menuIdIdentificacionPersona) &&\r\n                                                <Nav.Item>\r\n                                                    <Nav.Link eventKey=\"identificaciones\" disabled={personaId <= 0 ? true : false}>Identificaciones</Nav.Link>\r\n                                                </Nav.Item>}\r\n                                            {\r\n                                                accesos.find(acceso => acceso.menuId === menuIdDireccionPersona) &&\r\n                                                <Nav.Item>\r\n                                                    <Nav.Link eventKey=\"direcciones\" disabled={personaId <= 0 ? true : false}>Direcciones</Nav.Link>\r\n                                                </Nav.Item>}\r\n                                            {\r\n                                                accesos.find(acceso => acceso.menuId === menuIdTelefonoPersona) &&\r\n                                                <Nav.Item>\r\n                                                    <Nav.Link eventKey=\"telefonos\" disabled={personaId <= 0 ? true : false}>Teléfonos</Nav.Link>\r\n                                                </Nav.Item>\r\n                                            }\r\n                                            {\r\n                                                accesos.find(acceso => acceso.menuId === menuIdDatoExtraPersona) &&\r\n                                                <Nav.Item>\r\n                                                    <Nav.Link eventKey=\"datosExtra\" disabled={personaId <= 0 ? true : false}>Información Adicional</Nav.Link>\r\n                                                </Nav.Item>\r\n                                            }\r\n                                        </Nav>\r\n                                    </Col>\r\n                                    <Col sm={10}>\r\n                                        <Tab.Content>\r\n                                            <Tab.Pane eventKey=\"persona\">\r\n                                                <PersonaRegistrar handleSetIdPersona={handleSetIdPersona} personaId={personaId} />\r\n                                            </Tab.Pane>\r\n                                            <Tab.Pane eventKey=\"identificaciones\">\r\n                                                <IdentificacionListar personaId={personaId} />\r\n                                            </Tab.Pane>\r\n                                            <Tab.Pane eventKey=\"direcciones\">\r\n                                                <DireccionListar personaId={personaId} />\r\n                                            </Tab.Pane>\r\n                                            <Tab.Pane eventKey=\"telefonos\">\r\n                                                <TelefonoListar personaId={personaId} />\r\n                                            </Tab.Pane>\r\n                                            <Tab.Pane eventKey=\"datosExtra\">\r\n                                                <DatoExtraListar personaId={personaId} />\r\n                                            </Tab.Pane>\r\n                                        </Tab.Content>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Tab.Container>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n\r\nexport default PersonaUpSertPage;","import React from 'react'\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nexport const NoAutorizado = () => {\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading as=\"h4\">Información!</Alert.Heading>\r\n                        <p>No esta autorizado para poder visualizar los elementos</p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">Comuniquese con el administrador para la asignación de permisos</p>\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n"],"sourceRoot":""}