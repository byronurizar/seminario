{"version":3,"sources":["App/components/base/RolMenuAccesoUpSert.js","App/components/base/RolMenuAccesoListar.js","App/pages/RolMenuAccesoPage.js","App/components/base/NoAutorizado.js","helpers/estiloTabla.js"],"names":["RolMenuAccesoUpSert","dataInicial","abrirModal","catMenu","handleUpdate","state","useSelector","useState","loading","setLoading","existeCambio","setExisteCambio","accesos","setAccesos","menuId","setMenuid","menuAcceso","setMenuAcceso","listAsignados","setListAsignados","menuEdit","setMenuEdit","NuevoRegistro","data","a","callApi","method","body","JSON","stringify","alert_exitoso","GetMenuAcceso","ActualizarRegistro","response","GetPermisosAsignados","id","find","acceso","accesoId","handleChangeChecbox","rol_menu_accesoId","menu_accesoId","asignado","estadoId","rolId","useEffect","misAccesos","filter","item","GetAccesosByMenuId","i","Number","hadleSetValueList","Modal","show","onHide","size","Loading","Header","closeButton","Title","as","Body","Autocomplete","value","name","options","getOptionLabel","option","descripcion","style","width","onChange","event","nuevoValor","renderInput","params","TextField","label","length","Table","striped","hover","responsive","bordered","map","Acceso","existe","key","textAlign","Form","Group","className","Control","type","checked","Label","htmlFor","Footer","Button","variant","onClick","RolMenuAccesoListar","idrol","dispatch","useDispatch","setAbrirModal","setCatMenu","rolMenuAcceso","setRolMenuAcceso","infoRol","setInfoRol","initData","setdataInicial","GetCatMenu","GetRolMenuAcceso","limpiarEstiloTabla","asignarEstiloTabla","GetInfoRol","nombre","Row","Col","sm","Card","MenuAcceso","descMenu","Menu","desAcceso","descEstado","Estado","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","listActual","alert_warning","NoAutorizado","UpdateUserInfo","RolMenuAccesoPage","match","codigoRol","atob","split","Heading","$","DataTable","require","selector","filas","searching","bLengthChange","bAutoWidth","lengthMenu","displayLength","language","processing","search","info","infoEmpty","infoFiltered","infoPostFix","loadingRecords","zeroRecords","emptyTable","paginate","first","previous","next","last","aria","sortAscending","sortDescending","destroy"],"mappings":"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","file":"static/js/25.11e356b4.chunk.js","sourcesContent":["import Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Button,Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport { UpdateUserInfo } from '../../../actions/auth';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport { Table } from 'react-bootstrap';\r\nimport { Controls } from 'reactour';\r\nconst menuIdMenuAcceso = 19;\r\nexport const RolMenuAccesoUpSert = ({ dataInicial, abrirModal, catMenu, handleUpdate }) => {\r\n    \r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(false)\r\n    const [existeCambio, setExisteCambio] = useState(false)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [menuId, setMenuid] = useState(dataInicial.menuId);\r\n    const [menuAcceso, setMenuAcceso] = useState([]);\r\n    const [listAsignados, setListAsignados] = useState([]);\r\n    const [menuEdit, setMenuEdit] = useState(null);\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => (item.menuId === menuIdMenuAcceso));\r\n            setAccesos(misAccesos);\r\n        }\r\n    }\r\n\r\n    const hadleSetValueList=()=>{\r\n        let item=catMenu.find(i=>Number(i.menuId)===Number(menuId));\r\n        setMenuEdit(item);\r\n    }\r\n    const NuevoRegistro = async (data) => {\r\n        setLoading(true);\r\n        let response = await callApi('rolmenuacceso', {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Permiso registrado exitosamente\");\r\n            GetMenuAcceso(menuId);\r\n            setExisteCambio(true);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const ActualizarRegistro = async (data) => {\r\n        setLoading(true);\r\n        let response = await callApi('rolmenuacceso', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetMenuAcceso(menuId);\r\n            GetPermisosAsignados();\r\n            setExisteCambio(true);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleOnChangeMenu = (event, nuevoValor) => {\r\n        if(nuevoValor){\r\n        let { menuId = 0 } = nuevoValor;\r\n        setMenuEdit(nuevoValor);\r\n        setMenuid(menuId);\r\n        }\r\n    }\r\n    const GetMenuAcceso = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdMenuAcceso && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            if (id != 0) {\r\n                let response = await callApi(`menuacceso?menuId=${id}&estadoId=1`);\r\n                if (response) {\r\n                    setMenuAcceso(response);\r\n                    GetPermisosAsignados();\r\n                }\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const GetPermisosAsignados = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdMenuAcceso && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            if (menuId != 0) {\r\n                let response = await callApi(`rolmenuacceso?menuId=${menuId}`);\r\n                if (response) {\r\n                    setListAsignados(response);\r\n                }\r\n            }\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n    const handleChangeChecbox = async (rol_menu_accesoId, menu_accesoId, asignado) => {\r\n\r\n        if (rol_menu_accesoId > 0) {\r\n            let estadoId = 1;\r\n            if (asignado) {\r\n                estadoId = 2;\r\n            }\r\n            let data = {\r\n                rol_menu_accesoId,\r\n                menu_accesoId,\r\n                estadoId\r\n            }\r\n            ActualizarRegistro(data);\r\n        } else {\r\n            let data = {\r\n                rolId: dataInicial.rolId,\r\n                menu_accesoId\r\n            }\r\n            NuevoRegistro(data);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetPermisosAsignados();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n    useEffect(() => {\r\n        GetMenuAcceso(menuId);\r\n        hadleSetValueList();\r\n    }, [menuId, accesos]);\r\n\r\n    \r\n    return (\r\n        <Modal show={abrirModal} onHide={() => handleUpdate(existeCambio)} size=\"lg\">\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.rol_menu_accesoId > 0 ? 'Actualizar Permiso' : 'Nuevo Permiso'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n\r\n                            <Autocomplete\r\n                                value={menuEdit || null}\r\n                                id=\"menuId\"\r\n                                name=\"menuId\"\r\n                                options={catMenu || []}\r\n                                getOptionLabel={(option) => option.descripcion}\r\n                                style={{ width: 600 }}\r\n                                size=\"small\"\r\n                                onChange={handleOnChangeMenu}\r\n                                renderInput={(params) => <TextField {...params} label=\"Nombre Menu\" />}\r\n                            />\r\n\r\n                            <br></br>\r\n                            <br></br>\r\n                            <h5>Accesos disponibles</h5>\r\n                            <hr />\r\n                            {\r\n                                menuAcceso.length > 0 &&\r\n                                    <Table striped hover responsive bordered id=\"mytable\">\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Código</th>\r\n                                                <th>Acceso</th>\r\n                                                {\r\n                                                    (accesos.find(acceso => acceso.menuId === menuIdMenuAcceso && acceso.accesoId === 1) || accesos.find(acceso => acceso.menuId === menuIdMenuAcceso && acceso.accesoId === 2)) &&\r\n                                                    <th>Estado</th>\r\n                                                }\r\n                                            </tr>\r\n\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                menuAcceso.map(({ menu_accesoId, Acceso }) => {\r\n                                                    let existe = listAsignados.find(i => Number(i.menu_accesoId) === Number(menu_accesoId));\r\n                                                    let rol_menu_accesoId = 0;\r\n                                                    let estadoId = 0;\r\n                                                    if (existe) {\r\n                                                        rol_menu_accesoId = existe.rol_menu_accesoId;\r\n                                                        estadoId = existe.estadoId;\r\n                                                    }\r\n                                                    let asignado = false;\r\n                                                    if (estadoId === 1) {\r\n                                                        asignado = true;\r\n                                                    }\r\n                                                    return (\r\n                                                        <tr key={menu_accesoId}>\r\n                                                            <td>{menu_accesoId}</td>\r\n                                                            <td>{Acceso.descripcion}</td>\r\n                                                            {\r\n                                                                accesos.find(i => i.accesoId === 1 || i.accesoId === 2) ?\r\n                                                                    <td style={{ textAlign: \"center\" }}>\r\n                                                                        <Form.Group>\r\n                                                                            <div className=\"switch switch-alternative d-inline m-r-10\">\r\n                                                                                <Form.Control type=\"checkbox\" id={`menu_accesoId_${menu_accesoId}`} checked={asignado} onChange={() => { handleChangeChecbox(rol_menu_accesoId, menu_accesoId, asignado); }} />\r\n                                                                                <Form.Label htmlFor={`menu_accesoId_${menu_accesoId}`} className=\"cr\" />\r\n                                                                            </div>\r\n                                                                            <Form.Label htmlFor={`menu_accesoId_${menu_accesoId}`}>{\r\n                                                                                asignado ? 'Activo' : 'Inactivo'\r\n                                                                            }</Form.Label>\r\n                                                                        </Form.Group>\r\n                                                                    </td> : <td style={{ textAlign: \"center\" }}><label className=\"text-danger\">No Autorizado</label></td>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </tbody>\r\n                                    </Table>\r\n                            }\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"warning\" onClick={() => { handleUpdate(existeCambio) }}>Salir</Button>\r\n                        </Modal.Footer>\r\n\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { RolMenuAccesoUpSert } from './RolMenuAccesoUpSert';\r\nimport { limpiarEstiloTabla, asignarEstiloTabla } from '../../../helpers/estiloTabla';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nimport { UpdateUserInfo } from '../../../actions/auth';\r\nconst menuId = 20;\r\nconst menuIdMenu = 21;\r\nconst menuIdRol = 11;\r\nexport const RolMenuAccesoListar = ({ idrol }) => {\r\n    const dispatch = useDispatch();\r\n    const state = useSelector(state => state);\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [loading, setLoading] = useState(true)\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catMenu, setCatMenu] = useState([]);\r\n    const [rolMenuAcceso, setRolMenuAcceso] = useState([]);\r\n    const [infoRol, setInfoRol] = useState([]);\r\n    const initData = {\r\n        menuId: '',\r\n        rolId: idrol,\r\n        menu_accesoId: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdRol || item.menuId === menuIdMenu);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n    const GetCatMenu = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdMenu && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi('menu?estadoId=1');\r\n            if (response) {\r\n                setCatMenu(response);\r\n            }\r\n        } else {\r\n            setCatMenu([{ menuId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const GetRolMenuAcceso = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            limpiarEstiloTabla(\"#mytable\");\r\n            setLoading(true);\r\n            let response = await callApi(`rolmenuacceso?rolId=${id}&estadoId=1;2`);\r\n            if (response) {\r\n                setRolMenuAcceso(response);\r\n            }\r\n        }\r\n        setLoading(false);\r\n        asignarEstiloTabla(\"#mytable\");\r\n    }\r\n    const handleUpdate=(existeCambio)=>{\r\n        setAbrirModal(false);\r\n        if(existeCambio===true){\r\n            GetRolMenuAcceso(dataInicial.rolId);\r\n            dispatch(UpdateUserInfo());\r\n        }\r\n    }\r\n    const GetInfoRol = async (id) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdRol && acceso.accesoId === 3)) {\r\n            setLoading(true);\r\n            let response = await callApi(`rol?id=${id}&include=0`);\r\n            if (response) {\r\n                setInfoRol(response[0]);\r\n            }\r\n        } else {\r\n            setInfoRol([{ nombre: 'No esta autorizado' }]);\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { rol_menu_accesoId, rolId, menu_accesoId, estadoId, MenuAcceso: { menuId } } = rolMenuAcceso.find(item => item.rol_menu_accesoId === id);\r\n        setdataInicial({\r\n            rol_menu_accesoId,\r\n            menu_accesoId,\r\n            estadoId,\r\n            menuId,\r\n            rolId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`rolmenuacceso/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    let listActual = rolMenuAcceso.filter(item => item.rol_menu_accesoId !== id);\r\n                    setRolMenuAcceso(listActual);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, [state?.accesos]);\r\n\r\n    useEffect(() => {\r\n        GetCatMenu();\r\n    }, [accesos]);\r\n\r\n    useEffect(() => {\r\n        GetInfoRol(idrol);\r\n        GetRolMenuAcceso(idrol);\r\n    }, [idrol, accesos])\r\n    return (\r\n        <Aux>\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Row className='btn-page'>\r\n                            <Col sm={12}>\r\n                                {\r\n                                    accesos.find(acceso => acceso.menuId === menuIdRol && acceso.accesoId === 3) ?\r\n                                        <Card>\r\n                                            <Card.Header>\r\n                                                <Card.Title as=\"h5\">{`${infoRol.nombre}`} Acceso</Card.Title>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Row className=\"align-items-center m-l-0\">\r\n                                                    <Col />\r\n                                                    <Col className=\"text-right\">\r\n                                                        {\r\n                                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                            <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Acceso</Button>\r\n                                                        }\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                        <Table striped hover responsive bordered id=\"mytable\">\r\n                                                            <thead>\r\n                                                                <tr>\r\n                                                                    <th>Código</th>\r\n                                                                    <th>Menu</th>\r\n                                                                    <th>Acceso</th>\r\n                                                                    <th>Estado</th>\r\n                                                                    {\r\n                                                                        accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                        <th></th>\r\n                                                                    }\r\n                                                                </tr>\r\n                                                            </thead>\r\n                                                            <tbody>\r\n                                                                {\r\n                                                                    rolMenuAcceso.map(({ rol_menu_accesoId, MenuAcceso: { Menu: { descripcion: descMenu }, Acceso: { descripcion: desAcceso } }, Estado: { descripcion: descEstado } }) => {\r\n                                                                        return (\r\n                                                                            <tr key={rol_menu_accesoId}>\r\n                                                                                <td>{rol_menu_accesoId}</td>\r\n                                                                                <td>{descMenu}</td>\r\n                                                                                <td>{desAcceso}</td>\r\n                                                                                <td>{descEstado}</td>\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                                    <td style={{ textAlign: \"center\" }}>\r\n\r\n                                                                                        {\r\n                                                                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                            <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(rol_menu_accesoId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                                        }\r\n                                                                                        {\r\n                                                                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                            <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(rol_menu_accesoId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                                        }\r\n                                                                                    </td>\r\n                                                                                }\r\n                                                                            </tr>\r\n                                                                        )\r\n                                                                    })\r\n                                                                }\r\n                                                            </tbody>\r\n                                                        </Table>\r\n                                                        : <NoAutorizado />\r\n                                                }\r\n                                                {\r\n                                                    abrirModal === true &&\r\n                                                    <RolMenuAccesoUpSert \r\n                                                        abrirModal={abrirModal} \r\n                                                        setAbrirModal={setAbrirModal} \r\n                                                        catMenu={catMenu} \r\n                                                        dataInicial={dataInicial} \r\n                                                        handleUpdate={handleUpdate} \r\n                                                         />\r\n                                                }\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                        : <NoAutorizado />\r\n                                }\r\n                            </Col>\r\n                        </Row>\r\n                    </>\r\n            }\r\n        </Aux>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { RolMenuAccesoListar } from '../components/base/RolMenuAccesoListar';\r\n\r\nconst RolMenuAccesoPage = ({match}) => {\r\n      let { idrol } = match.params;\r\n    idrol = !idrol ? \"\" : idrol;\r\n   let codigoRol=atob(idrol).split('=')[1];\r\n    return (\r\n      <RolMenuAccesoListar idrol={codigoRol}/>\r\n    )\r\n}\r\n\r\nexport default RolMenuAccesoPage;\r\n","import React from 'react'\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nexport const NoAutorizado = () => {\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading as=\"h4\">Información!</Alert.Heading>\r\n                        <p>No esta autorizado para poder visualizar los elementos</p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">Comuniquese con el administrador para la asignación de permisos</p>\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n","import $ from 'jquery';\r\n$.DataTable = require('datatables.net-bs');\r\nrequire('datatables.net-responsive-bs');\r\n\r\nexport const asignarEstiloTabla = (selector,filas=10) => {\r\n    $(selector).DataTable({\r\n        searching: true,\r\n        bLengthChange: false,\r\n        bAutoWidth: false,\r\n        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"Todos\"]],\r\n        displayLength: filas,\r\n        language: {\r\n            processing: \"Cargando información\",\r\n            search: \"Filtrar por:\",\r\n            lengthMenu: \"Mostrar _MENU_ filas\",\r\n            info: \"Vizualización  _END_ de _TOTAL_ filas\",\r\n            infoEmpty: \"Vizualización del elemento 0 a 0 de 0 filas\",\r\n            infoFiltered: \"(Filtrado de _MAX_ filas en total)\",\r\n            infoPostFix: \"\",\r\n            loadingRecords: \"Cargando...\",\r\n            zeroRecords: \"No se logró encontrar ninguna coincidencia\",\r\n            emptyTable: \"No existen registros\",\r\n            paginate: {\r\n                first: \"Primera\",\r\n                previous: \"Anterior\",\r\n                next: \"Siguiente\",\r\n                last: \"Ultima\"\r\n            },\r\n            aria: {\r\n                sortAscending: \": active para ordenar la columna en orden ascendente\",\r\n                sortDescending: \": active para ordenar la columna en orden descendente\"\r\n            }\r\n        }\r\n    });\r\n}\r\nexport const limpiarEstiloTabla=(selector)=>{\r\n        $(selector).DataTable().destroy();\r\n}"],"sourceRoot":""}