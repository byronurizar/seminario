{"version":3,"sources":["App/components/base/ComercioUpSert.js","App/components/base/SucursalUpSert.js","App/components/base/SucursalListar.js","App/components/base/ComercioListar.js","App/pages/ComercioPage.js","App/components/base/NoAutorizado.js","helpers/estiloTabla.js"],"names":["ComercioUpSert","dataInicial","abrirModal","setAbrirModal","GetComercios","useForm","values","handleOnChange","useState","loading","setLoading","NuevoRegistro","a","callApi","method","body","JSON","stringify","alert_exitoso","ActualizarRegistro","response","handleOnSubmit","e","preventDefault","comercioId","errorMessage","Modal","show","onHide","size","Loading","Header","closeButton","Title","as","Body","onSubmit","onErrorSubmit","formData","errorInputs","alert_warning","Form","Row","Group","Col","md","Label","htmlFor","name","id","required","value","nombre","onChange","placeholder","style","textTransform","autoComplete","minLength","type","razon_social","nit","telefono","correo","estadoId","className","onClick","SucursalUpSert","accesos","catRegiones","GetSucursales","departamentos","setDepartamentos","listMunicipio","setListMunicipio","GetDepartamentos","regionId","find","acceso","menuId","accesoId","departamentoId","descripcion","GetMunicipios","sucursalId","useEffect","map","key","municipioId","multiline","direccion","rows","SucursalListar","itemComercio","FunMostrarComercios","state","useSelector","setAccesos","setRegiones","listSucursales","setListSucursales","initData","setdataInicial","limpiarEstiloTabla","asignarEstiloTabla","GetRegiones","misAccesos","filter","item","GetAccesosByMenuId","sm","Card","comercioNombre","Button","variant","Table","striped","hover","responsive","bordered","fecha_crea","Municipio","estado","Estado","descMunicipio","Departamento","descDepto","descRegion","Region","moment","format","textAlign","handleEditar","withReactContent","Swal","fire","title","text","showCloseButton","showCancelButton","then","willDelete","listActual","NoAutorizado","ComercioListar","mostrarSucursales","setItemComercio","listComercios","setListComercios","handleSucursales","aux","i","Number","SedeDiacoPage","Heading","$","DataTable","require","selector","filas","searching","bLengthChange","bAutoWidth","lengthMenu","displayLength","language","processing","search","info","infoEmpty","infoFiltered","infoPostFix","loadingRecords","zeroRecords","emptyTable","paginate","first","previous","next","last","aria","sortAscending","sortDescending","destroy"],"mappings":"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","file":"static/js/19.f6272b9b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nexport const ComercioUpSert = ({ dataInicial, abrirModal, setAbrirModal, GetComercios }) => {\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false)\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('comercio', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Comercio registrado exitosamente\");\r\n            GetComercios();\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('comercio', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetComercios();\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.comercioId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'capitalize';\r\n    const textTranformEmail='lowercase';\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"lg\">\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.comercioId > 0 ? 'Actualizar Información del Comercio' : 'Registrar Nuevo Comercio'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"nombre\">Nombre</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"nombre\"\r\n                                            id=\"nombre\"\r\n                                            required\r\n                                            value={values.nombre}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Nombre\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            autoComplete=\"off\"\r\n                                            minLength=\"5\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"razon_social\">Razon Social</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"razon_social\"\r\n                                            id=\"razon_social\"\r\n                                            required\r\n                                            value={values.razon_social}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Razon Social\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"nit\">Nit</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"nit\"\r\n                                            id=\"nit\"\r\n                                            required\r\n                                            value={values.nit}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Nit\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"telefono\">Teléfono</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"telefono\"\r\n                                            id=\"telefono\"\r\n                                            required\r\n                                            value={values.telefono}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Teléfono\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"correo\">Correo</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"correo\"\r\n                                            id=\"correo\"\r\n                                            required\r\n                                            value={values.correo}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Correo\"\r\n                                            style={{ textTransform: textTranformEmail }}\r\n                                            autoComplete=\"off\"\r\n                                            type=\"email\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.comercioId > 0 &&\r\n                                        <Form.Group as={Col} md=\"6\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                    </Form.Row>\r\n                                    <Form.Row>\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.comercioId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport { Col, Form, Modal } from 'react-bootstrap';\r\nimport { ValidationForm, TextInput, SelectGroup } from 'react-bootstrap4-form-validation';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport Loading from './Loading';\r\nconst menuIdDepartamento = 9;\r\nconst menuIdMunicipio = 10;\r\nexport const SucursalUpSert = ({ accesos, dataInicial, abrirModal, setAbrirModal, catRegiones, GetSucursales }) => {\r\n    const [values, handleOnChange] = useForm(dataInicial);\r\n    const [loading, setLoading] = useState(false);\r\n    const [departamentos, setDepartamentos] = useState([]);\r\n    const [listMunicipio, setListMunicipio] = useState([]);\r\n    const NuevoRegistro = async () => {\r\n        let response = await callApi('sucursal', {\r\n            method: 'POST',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(\"Sucursal registrada exitosamente\");\r\n            GetSucursales();\r\n            setAbrirModal(false);\r\n        }\r\n    }\r\n    const GetDepartamentos = async (regionId) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdDepartamento && acceso.accesoId === 3)) {\r\n            let response = await callApi(`departamento?include=0&regionId=${regionId}`);\r\n            if (response) {\r\n                setDepartamentos(response);\r\n            } else {\r\n                setDepartamentos([{ departamentoId: '', descripcion: 'NO ESTA AUTORIZADO' }]);\r\n            }\r\n        }\r\n    }\r\n    const GetMunicipios = async (departamentoId) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdMunicipio && acceso.accesoId === 3)) {\r\n            let response = await callApi(`municipio?include=0&departamentoId=${departamentoId}`);\r\n            if (response) {\r\n                setListMunicipio(response);\r\n            }\r\n        }\r\n    }\r\n\r\n    const ActualizarRegistro = async () => {\r\n        let response = await callApi('sucursal', {\r\n            method: 'PUT',\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n        if (response) {\r\n            alert_exitoso(response);\r\n            GetSucursales();\r\n        }\r\n        setAbrirModal(false);\r\n    }\r\n    const handleOnSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        if (dataInicial.sucursalId > 0) {\r\n            await ActualizarRegistro();\r\n        } else {\r\n            await NuevoRegistro();\r\n        }\r\n        setLoading(false);\r\n    }\r\n    const handleErrorSubmit = (e, formData, errorInputs) => {\r\n        alert_warning(\"Por favor complete toda la información solicitada por el formulario\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (values?.regionId > 0) {\r\n            GetDepartamentos(values.regionId);\r\n        }\r\n    }, [values.regionId]);\r\n\r\n    useEffect(() => {\r\n        if (values?.regionId > 0) {\r\n            GetDepartamentos(values.regionId);\r\n            setListMunicipio([]);\r\n        }\r\n    }, [values.regionId]);\r\n\r\n    useEffect(() => {\r\n        if (values?.departamentoId > 0) {\r\n            GetMunicipios(values.departamentoId);\r\n        }\r\n    }, [values.departamentoId]);\r\n\r\n\r\n    const errorMessage = \"Campo obligatorio\";\r\n    const textTransform = 'capitalize';\r\n    const textTranformEmail='lowercase';\r\n    return (\r\n        <Modal show={abrirModal} onHide={() => setAbrirModal(false)} size=\"xl\">\r\n            {\r\n                loading === true ?\r\n                    <Loading />\r\n                    : <>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title as=\"h5\">{dataInicial.sucursalId > 0 ? 'Sucursal Sede' : 'Nueva Sucursal'}</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <ValidationForm onSubmit={handleOnSubmit} onErrorSubmit={handleErrorSubmit}>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"nombre\">Nombre</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"nombre\"\r\n                                            id=\"nombre\"\r\n                                            required\r\n                                            value={values.nombre}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            style={{ textTransform: textTransform }}\r\n                                            placeholder=\"Nombre\"\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"regionId\">Region</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"regionId\"\r\n                                            id=\"regionId\"\r\n                                            required\r\n                                            value={values.regionId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione una Región</option>\r\n                                            {\r\n                                                catRegiones.map(({ regionId, descripcion }) => (\r\n                                                    <option value={regionId} key={regionId}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"departamentoId\">Departamento</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"departamentoId\"\r\n                                            id=\"departamentoId\"\r\n                                            required\r\n                                            value={values.departamentoId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un Departamento</option>\r\n                                            {\r\n                                                departamentos.map(({ departamentoId, descripcion }) => (\r\n                                                    <option value={departamentoId} key={`${departamentoId}_depto`}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"municipioId\">Municipio</Form.Label>\r\n                                        <SelectGroup\r\n                                            name=\"municipioId\"\r\n                                            id=\"municipioId\"\r\n                                            required\r\n                                            value={values.municipioId}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}>\r\n                                            <option value=\"\">Seleccione un Municipio</option>\r\n                                            {\r\n                                                listMunicipio.map(({ municipioId, descripcion }) => (\r\n                                                    <option value={municipioId} key={`${municipioId}_muns`}>{descripcion}</option>\r\n                                                )\r\n                                                )\r\n                                            }\r\n                                        </SelectGroup>\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"12\">\r\n                                        <Form.Label htmlFor=\"direccion\">Dirección</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"direccion\"\r\n                                            id=\"direccion\"\r\n                                            required\r\n                                            multiline\r\n                                            value={values.direccion ?? ''}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Descripción\"\r\n                                            autoComplete=\"off\"\r\n                                            rows=\"3\"\r\n                                            minLength=\"5\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"telefono\">Teléfono</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"telefono\"\r\n                                            id=\"telefono\"\r\n                                            required\r\n                                            value={values.telefono}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Teléfono\"\r\n                                            style={{ textTransform: textTransform }}\r\n                                            autoComplete=\"off\"\r\n                                            type=\"text\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} md=\"6\">\r\n                                        <Form.Label htmlFor=\"correo\">Correo</Form.Label>\r\n                                        <TextInput\r\n                                            name=\"correo\"\r\n                                            id=\"correo\"\r\n                                            required\r\n                                            value={values.correo}\r\n                                            onChange={handleOnChange}\r\n                                            errorMessage={errorMessage}\r\n                                            placeholder=\"Correo\"\r\n                                            style={{ textTransform: textTranformEmail }}\r\n                                            autoComplete=\"off\"\r\n                                            type=\"email\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                    {\r\n                                        dataInicial.sucursalId > 0 &&\r\n                                        <Form.Group as={Col} md=\"6\">\r\n                                            <Form.Label htmlFor=\"estadoId\">Estado</Form.Label>\r\n                                            <SelectGroup\r\n                                                name=\"estadoId\"\r\n                                                id=\"estadoId\"\r\n                                                value={values.estadoId}\r\n                                                required\r\n                                                errorMessage={errorMessage}\r\n                                                onChange={handleOnChange}>\r\n                                                <option value=\"\">Seleccione un estado</option>\r\n                                                <option value=\"1\">Activo</option>\r\n                                                <option value=\"2\">Inactivo</option>\r\n                                            </SelectGroup>\r\n                                        </Form.Group>\r\n                                    }\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <div className=\"col-sm-3\"></div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"button\" onClick={() => { setAbrirModal(false) }} className=\"btn btn-warning\"> Cancelar</button>\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-success\"> {dataInicial.sucursalId > 0 ? 'Actualizar' : 'Registrar'}</button>\r\n                                    </div>\r\n                                </Form.Row>\r\n                            </ValidationForm>\r\n                        </Modal.Body>\r\n                    </>\r\n            }\r\n        </Modal>\r\n    )\r\n}\r\n","import moment from 'moment';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useSelector } from 'react-redux';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { limpiarEstiloTabla, asignarEstiloTabla } from '../../../helpers/estiloTabla';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nimport { SucursalUpSert } from './SucursalUpSert';\r\nconst menuId = 31;\r\nconst menuIdRegion = 8;\r\nconst menuIdDepartamento = 9;\r\nconst menuIdMunicipio = 10;\r\nexport const SucursalListar = ({itemComercio,FunMostrarComercios}) => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [catRegiones, setRegiones] = useState([]);\r\n    const [listSucursales, setListSucursales] = useState([]);\r\n    const initData = {\r\n        comercioId: itemComercio.comercioId,\r\n        nombre: '',\r\n        municipioId: '',\r\n        direccion: '',\r\n        telefono:'',\r\n        correo:'',\r\n        regionId:'',\r\n        departamentoId:'',\r\n        estadoId: 1\r\n    };\r\n\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => (item.menuId === menuId || item.menuId === menuIdRegion || item.menuId === menuIdDepartamento || item.menuId === menuIdMunicipio));\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n\r\n    const GetSucursales = async (comercioId) => {\r\n        if (accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3)) {\r\n            limpiarEstiloTabla(\"#tableSucursales\");\r\n            setLoading(true);\r\n            let response = await callApi(`sucursal?comercioId=${itemComercio.comercioId}&estado=1;2`);\r\n            if (response) {\r\n                setListSucursales(response);\r\n            }\r\n            setLoading(false);\r\n            asignarEstiloTabla(\"#tableSucursales\");\r\n        }\r\n    }\r\n\r\n    const GetRegiones = async () => {\r\n        if (accesos.find(acceso => acceso.menuId === menuIdRegion && acceso.accesoId === 3)) {\r\n            let response = await callApi('region?include=0?estadoId=1');\r\n            if (response) {\r\n                setRegiones(response);\r\n            }\r\n        } else {\r\n            setRegiones([{ regionId: '', descripcion: 'No esta autorizado' }]);\r\n        }\r\n    }\r\n    \r\n    const handleEditar = (id) => {\r\n        const { sucursalId, comercioId, nombre, municipioId, direccion,telefono,correo, estadoId,Municipio:{Departamento:{departamentoId,regionId}} } = listSucursales.find(item => item.sucursalId === id);\r\n        setdataInicial({\r\n            sucursalId,\r\n            comercioId,\r\n            nombre,\r\n            municipioId,\r\n            direccion,\r\n            telefono,\r\n            correo,\r\n            regionId,\r\n            departamentoId,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`sucursal/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    limpiarEstiloTabla(\"#tableSucursales\");\r\n                    let listActual = listSucursales.filter(item => item.sucursalId !== id);\r\n                    setListSucursales(listActual);\r\n                    asignarEstiloTabla(\"#tableSucursales\");\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetSucursales(itemComercio.comercioId);\r\n        GetRegiones();\r\n    }, [accesos]);\r\n\r\n    return (\r\n        <Aux>\r\n\r\n            <Row className='btn-page'>\r\n                <Col sm={12}>\r\n                    <Card>\r\n\r\n                        <Card.Header>\r\n                            <Card.Title as=\"h5\">{`Listado de Sucursales del Comercio - ${itemComercio.comercioNombre}`}</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {\r\n                                loading === true ?\r\n                                    <Loading />\r\n                                    : <>\r\n                                        <Row className=\"align-items-center m-l-0\">\r\n                                        <Col className=\"text-left\">\r\n                                                    <Button variant=\"warning\" className=\"btn-sm btn-round has-ripple\" onClick={()=>{FunMostrarComercios()}}><i className=\"feather icon-arrow-left\" /> Regresar</Button>\r\n                                            </Col>\r\n                                            <Col className=\"text-right\">\r\n                                                {\r\n                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 1) &&\r\n                                                    <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Sucursal</Button>\r\n                                                }\r\n                                            </Col>\r\n                                        </Row>\r\n                                        {\r\n                                            accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 3) ?\r\n                                                <Table striped hover responsive bordered id=\"tableSucursales\">\r\n                                                    <thead>\r\n                                                        <tr>\r\n                                                            <th>No</th>\r\n                                                            <th>Nombre</th>\r\n                                                            <th>Region</th>\r\n                                                            <th>Departamento</th>\r\n                                                            <th>Municipio</th>\r\n                                                            <th>Dirección</th>\r\n                                                            <th>Teléfono</th>\r\n                                                            <th>Correo</th>\r\n                                                            <th>Fecha Ingreso</th>\r\n                                                            <th>Estado</th>\r\n                                                            {\r\n                                                                accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                <th></th>\r\n                                                            }\r\n                                                        </tr>\r\n                                                    </thead>\r\n                                                    <tbody>\r\n                                                        {\r\n                                                            listSucursales.map(({ sucursalId, nombre, direccion, fecha_crea,telefono,correo, Municipio, Estado: { descripcion: estado } }) => {\r\n                                                                let { descripcion: descMunicipio, Departamento } = Municipio;\r\n                                                                let { descripcion: descDepto, Region } = Departamento;\r\n                                                                let { descripcion: descRegion } = Region;\r\n                                                                return (\r\n                                                                    <tr key={sucursalId}>\r\n                                                                        <td>{sucursalId}</td>\r\n                                                                        <td>{nombre}</td>\r\n                                                                        <td>{descRegion}</td>\r\n                                                                        <td>{descDepto}</td>\r\n                                                                        <td>{descMunicipio}</td>\r\n                                                                        <td>{direccion}</td>\r\n                                                                        <td>{telefono}</td>\r\n                                                                        <td>{correo}</td>\r\n                                                                        <td>{moment(fecha_crea).format('DD/MM/YYYY')}</td>\r\n                                                                        <td>{estado}</td>\r\n                                                                        {\r\n                                                                            accesos.find(acceso => (acceso.menuId === menuId && acceso.accesoId === 2) || (acceso.menuId === menuId && acceso.accesoId === 4)) &&\r\n                                                                            <td style={{ textAlign: \"center\" }}>\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 2) &&\r\n                                                                                    <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(sucursalId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                                }\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.menuId === menuId && acceso.accesoId === 4) &&\r\n                                                                                    <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(sucursalId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                                }\r\n                                                                            </td>\r\n                                                                        }\r\n                                                                    </tr>\r\n                                                                )\r\n                                                            })\r\n\r\n                                                        }\r\n                                                    </tbody>\r\n                                                </Table>\r\n                                                : <NoAutorizado />\r\n                                        }\r\n                                    </>\r\n                            }\r\n                            {\r\n                                abrirModal === true &&\r\n                                <SucursalUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} catRegiones={catRegiones} GetSucursales={GetSucursales} dataInicial={dataInicial} accesos={accesos} />\r\n                            }\r\n\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Card, Button, Table } from 'react-bootstrap';\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport { useSelector } from 'react-redux';\r\nimport Aux from '../../../hoc/_Aux';\r\nimport callApi from '../../../helpers/conectorApi';\r\nimport { alert_exitoso, alert_warning } from '../../../helpers/Notificacion';\r\nimport { NoAutorizado } from './NoAutorizado';\r\nimport Loading from './Loading';\r\nimport { asignarEstiloTabla, limpiarEstiloTabla } from '../../../helpers/estiloTabla';\r\nimport { ComercioUpSert } from './ComercioUpSert';\r\nimport { SucursalListar } from './SucursalListar';\r\nconst menuId = 30;\r\nconst menuIdSucursal = 31;\r\nexport const ComercioListar = () => {\r\n    const state = useSelector(state => state);\r\n    const [loading, setLoading] = useState(true)\r\n    const [itemComercio, setItemComercio] = useState({\r\n        comercioId:'',\r\n        comercioNombre:'',\r\n        mostrarSucursales:false\r\n    });\r\n    const [accesos, setAccesos] = useState([]);\r\n    const [abrirModal, setAbrirModal] = useState(false);\r\n    const [listComercios, setListComercios] = useState([]);\r\n    const initData = {\r\n        comercioId: '',\r\n        nombre: '',\r\n        razon_social: '',\r\n        nit: '',\r\n        telefono: '',\r\n        correo: '',\r\n        estadoId: 1\r\n    };\r\n\r\n    const FunMostrarComercios=()=>{\r\n        setItemComercio({\r\n            comercioId:'',\r\n            comercioNombre:'',\r\n            mostrarSucursales:false\r\n        });\r\n    }\r\n    const GetAccesosByMenuId = () => {\r\n        if (state?.accesos) {\r\n            const { accesos } = state;\r\n            const misAccesos = accesos.filter(item => item.menuId === menuId || item.menuId === menuIdSucursal);\r\n            setAccesos(misAccesos);\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const [dataInicial, setdataInicial] = useState(initData);\r\n    const handleOpenModal = () => {\r\n        setAbrirModal(true);\r\n        setdataInicial(initData);\r\n    }\r\n\r\n    const GetComercios = async () => {\r\n        if (accesos.find(acceso => acceso.accesoId === 3)) {\r\n            limpiarEstiloTabla(\"#mytable\");\r\n            setLoading(true);\r\n            let response = await callApi(`comercio?estadoId=1;2`);\r\n            if (response) {\r\n                setListComercios(response);\r\n            }\r\n            setLoading(false);\r\n            asignarEstiloTabla(\"#mytable\", 25);\r\n        }\r\n    }\r\n    const handleEditar = (id) => {\r\n        const { comercioId, nombre, razon_social, nit, telefono, correo, estadoId } = listComercios.find(item => item.comercioId === id);\r\n        setdataInicial({\r\n            comercioId,\r\n            nombre,\r\n            razon_social,\r\n            nit,\r\n            telefono,\r\n            correo,\r\n            estadoId\r\n        });\r\n        setAbrirModal(true);\r\n    }\r\n    const handleSucursales = (id,nombre) => {\r\n        setItemComercio({\r\n            comercioId:id,\r\n            comercioNombre:nombre\r\n        })\r\n    }\r\n    const handleDelete = (id) => {\r\n        const MySwal = withReactContent(Swal);\r\n        MySwal.fire({\r\n            title: 'Alerta?',\r\n            text: 'Esta seguro que desea eliminar el elemento',\r\n            type: 'warning',\r\n            showCloseButton: true,\r\n            showCancelButton: true\r\n        }).then(async (willDelete) => {\r\n            if (willDelete.value) {\r\n                let method = 'DELETE';\r\n                let response = await callApi(`comercio/${id}`, {\r\n                    method\r\n                });\r\n                if (response) {\r\n                    alert_exitoso(response);\r\n                    limpiarEstiloTabla(\"#mytable\");\r\n                    let aux = listComercios.filter(i => Number(i.comercioId) !== Number(id));\r\n                    setListComercios(aux);\r\n                    asignarEstiloTabla(\"#mytable\", 25);\r\n                }\r\n            } else {\r\n                alert_warning('No se eliminó ningún elemento');\r\n            }\r\n        });\r\n    }\r\n    useEffect(() => {\r\n        GetAccesosByMenuId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        GetComercios();\r\n    }, [accesos]);\r\n    useEffect(() => {\r\n       if(itemComercio.mostrarSucursales==false){\r\n        asignarEstiloTabla(\"#mytable\", 25);\r\n       }\r\n    }, [itemComercio])\r\n    return (\r\n        <>\r\n            {\r\n                itemComercio.mostrarSucursales === false ?\r\n                    <Aux>\r\n                        <Row className='btn-page'>\r\n                            <Col sm={12}>\r\n                                <Card>\r\n                                    <Card.Header>\r\n                                        <Card.Title as=\"h5\">Listado de Comercios</Card.Title>\r\n                                    </Card.Header>\r\n                                    <Card.Body>\r\n                                        {\r\n                                            loading === true ?\r\n                                                <Loading />\r\n                                                : <>\r\n                                                    <Row className=\"align-items-center m-l-0\">\r\n                                                        <Col />\r\n                                                        <Col className=\"text-right\">\r\n                                                            {\r\n                                                                accesos.find(acceso => acceso.accesoId === 1) &&\r\n                                                                <Button variant=\"success\" className=\"btn-sm btn-round has-ripple\" onClick={handleOpenModal}><i className=\"feather icon-plus\" /> Agregar Comercio</Button>\r\n                                                            }\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                    {\r\n                                                        accesos.find(acceso => acceso.accesoId === 3) ?\r\n                                                            <Table striped hover responsive bordered id=\"mytable\">\r\n                                                                <thead>\r\n                                                                    <tr>\r\n                                                                        <th>Código</th>\r\n                                                                        <th>Nombre</th>\r\n                                                                        <th>Razon Social</th>\r\n                                                                        <th>Nit</th>\r\n                                                                        <th>Teléfono</th>\r\n                                                                        <th>Correo</th>\r\n                                                                        <th>Estado</th>\r\n                                                                        {\r\n                                                                            accesos.find(acceso => acceso.accesoId === 3 && acceso.menuId === menuIdSucursal) &&\r\n                                                                            <th>Sucursales</th>\r\n                                                                        }\r\n                                                                        {\r\n                                                                            accesos.find(acceso => (acceso.accesoId === 2 && acceso.menuId === menuId) || acceso.accesoId === 4 && acceso.menuId === menuId) &&\r\n                                                                            <th></th>\r\n                                                                        }\r\n                                                                    </tr>\r\n                                                                </thead>\r\n                                                                <tbody>\r\n                                                                    {\r\n                                                                        listComercios.map(({ comercioId, nombre, razon_social, nit, telefono, correo, Estado: { descripcion: estado } }) => (\r\n                                                                            <tr key={comercioId}>\r\n                                                                                <td>{comercioId}</td>\r\n                                                                                <td>{nombre}</td>\r\n                                                                                <td>{razon_social}</td>\r\n                                                                                <td>{nit}</td>\r\n                                                                                <td>{telefono}</td>\r\n                                                                                <td>{correo}</td>\r\n                                                                                <td>{estado}</td>\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => acceso.accesoId === 3 && acceso.menuId === menuIdSucursal) &&\r\n                                                                                    <td style={{ textAlign: \"center\" }}>\r\n                                                                                        <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleSucursales(comercioId,nombre) }}><i className=\"feather icon-list\" /></button>\r\n                                                                                    </td>\r\n                                                                                }\r\n\r\n                                                                                {\r\n                                                                                    accesos.find(acceso => (acceso.accesoId === 2 && acceso.menuId === menuId) || (acceso.accesoId === 4 && acceso.menuId === menuId)) &&\r\n                                                                                    <td style={{ textAlign: \"center\" }}>\r\n                                                                                        {\r\n                                                                                            accesos.find(acceso => acceso.accesoId === 2) &&\r\n                                                                                            <button className=\"btn-icon btn btn-info btn-sm\" onClick={() => { handleEditar(comercioId) }}><i className=\"feather icon-edit\" /></button>\r\n                                                                                        }\r\n                                                                                        {\r\n                                                                                            accesos.find(acceso => acceso.accesoId === 4) &&\r\n                                                                                            <button className=\"btn-icon btn btn-danger btn-sm\" onClick={() => { handleDelete(comercioId) }}><i className=\"feather icon-trash-2\" /></button>\r\n                                                                                        }\r\n                                                                                    </td>\r\n                                                                                }\r\n                                                                            </tr>\r\n                                                                        ))\r\n                                                                    }\r\n                                                                </tbody>\r\n                                                            </Table>\r\n                                                            : <NoAutorizado />\r\n                                                    }\r\n                                                </>\r\n                                        }\r\n                                        {\r\n                                            abrirModal === true &&\r\n                                            <ComercioUpSert abrirModal={abrirModal} setAbrirModal={setAbrirModal} GetComercios={GetComercios} dataInicial={dataInicial} />\r\n                                        }\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </Aux>\r\n                    : <SucursalListar itemComercio={itemComercio}  FunMostrarComercios={FunMostrarComercios}/>\r\n            }\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { ComercioListar } from '../components/base/ComercioListar'\r\n\r\nconst SedeDiacoPage = () => {\r\n    return (\r\n        <ComercioListar/>\r\n    )\r\n}\r\n\r\nexport default SedeDiacoPage\r\n","import React from 'react'\r\nimport { Row, Col, Alert } from 'react-bootstrap';\r\nimport Aux from '../../../hoc/_Aux';\r\nexport const NoAutorizado = () => {\r\n    return (\r\n        <Aux>\r\n            <Row>\r\n                <Col>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading as=\"h4\">Información!</Alert.Heading>\r\n                        <p>No esta autorizado para poder visualizar los elementos</p>\r\n                        <hr />\r\n                        <p className=\"mb-0\">Comuniquese con el administrador para la asignación de permisos</p>\r\n                    </Alert>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    )\r\n}\r\n","import $ from 'jquery';\r\n$.DataTable = require('datatables.net-bs');\r\nrequire('datatables.net-responsive-bs');\r\n\r\nexport const asignarEstiloTabla = (selector,filas=10) => {\r\n    $(selector).DataTable({\r\n        searching: true,\r\n        bLengthChange: false,\r\n        bAutoWidth: false,\r\n        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"Todos\"]],\r\n        displayLength: filas,\r\n        language: {\r\n            processing: \"Cargando información\",\r\n            search: \"Filtrar por:\",\r\n            lengthMenu: \"Mostrar _MENU_ filas\",\r\n            info: \"Vizualización  _END_ de _TOTAL_ filas\",\r\n            infoEmpty: \"Vizualización del elemento 0 a 0 de 0 filas\",\r\n            infoFiltered: \"(Filtrado de _MAX_ filas en total)\",\r\n            infoPostFix: \"\",\r\n            loadingRecords: \"Cargando...\",\r\n            zeroRecords: \"No se logró encontrar ninguna coincidencia\",\r\n            emptyTable: \"No existen registros\",\r\n            paginate: {\r\n                first: \"Primera\",\r\n                previous: \"Anterior\",\r\n                next: \"Siguiente\",\r\n                last: \"Ultima\"\r\n            },\r\n            aria: {\r\n                sortAscending: \": active para ordenar la columna en orden ascendente\",\r\n                sortDescending: \": active para ordenar la columna en orden descendente\"\r\n            }\r\n        }\r\n    });\r\n}\r\nexport const limpiarEstiloTabla=(selector)=>{\r\n        $(selector).DataTable().destroy();\r\n}"],"sourceRoot":""}